{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension, DIRECTION, winningTile } from \"./constants.js\";\nimport { updateTiles, gameOver } from \"./board.js\";\n\nfunction Timer() {\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"timer thing\");\n}\n\nfunction GameEndStatus() {\n  React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"You won!\");\n} // props value is whether game is over\n\n\nfunction StatusBar(props) {\n  const gameEnd = props.gameEnd;\n\n  if (gameEnd) {\n    return React.createElement(GameEndStatus, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(Timer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  });\n}\n\nfunction Tile(props) {\n  return React.createElement(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, props.value);\n}\n\nfunction Board() {\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  var _useState = useState(initialTiles),\n      _useState2 = _slicedToArray(_useState, 2),\n      tiles = _useState2[0],\n      setTiles = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      gameEnd = _useState4[0],\n      setGameEnd = _useState4[1];\n\n  const pressed = useKeyPress();\n\n  function renderTile(i, j) {\n    return React.createElement(Tile, {\n      value: tiles[i][j],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    });\n  }\n\n  function renderStatus() {\n    return React.createElement(StatusBar, {\n      gameEnd: gameOver(tiles),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    });\n  }\n\n  function renderRow(i) {\n    return React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, renderTile(i, 0), renderTile(i, 1), renderTile(i, 2), renderTile(i, 3));\n  }\n\n  function updateBoard() {\n    var direction = pressed.direction;\n    var newTiles = updateTiles(tiles, direction);\n    setTiles(newTiles);\n    console.log(gameOver(newTiles));\n    setGameEnd(gameOver(tiles)); //check if game over\n  }\n\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, renderStatus(), renderRow(0), renderRow(1), renderRow(2), renderRow(3));\n} // key press handler using vim keys\n\n\nfunction useKeyPress() {\n  const _useState5 = useState({\n    direction: null\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        keyPressed = _useState6[0],\n        setKeyPressed = _useState6[1];\n\n  function downHandler({\n    key\n  }) {\n    let pressed = null;\n\n    switch (key) {\n      case \"k\":\n        pressed = DIRECTION.UP;\n        break;\n\n      case \"j\":\n        pressed = DIRECTION.DOWN;\n        break;\n\n      case \"h\":\n        pressed = DIRECTION.LEFT;\n        break;\n\n      case \"l\":\n        pressed = DIRECTION.RIGHT;\n        break;\n\n      default:\n        pressed = null;\n        break;\n    }\n\n    setKeyPressed({\n      direction: pressed\n    });\n    console.log(\"pressed \".concat(pressed));\n  } // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nfunction Game() {\n  //const initialTiles = [\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //];\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"game-board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  })));\n} //function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 154\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","createContext","useState","useEffect","ReactDOM","dimension","DIRECTION","winningTile","updateTiles","gameOver","Timer","GameEndStatus","StatusBar","props","gameEnd","Tile","onClick","value","Board","initialTiles","tiles","setTiles","setGameEnd","pressed","useKeyPress","renderTile","i","j","renderStatus","renderRow","updateBoard","direction","newTiles","console","log","keyPressed","setKeyPressed","downHandler","key","UP","DOWN","LEFT","RIGHT","window","addEventListener","removeEventListener","Game","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension, DIRECTION, winningTile } from \"./constants.js\";\nimport { updateTiles, gameOver } from \"./board.js\";\n\nfunction Timer() {\n\treturn (<p>timer thing</p>);\n}\n\nfunction GameEndStatus() {\n\t<p>You won!</p>\n}\n\n// props value is whether game is over\nfunction StatusBar(props) {\n\tconst gameEnd = props.gameEnd;\n\tif (gameEnd) {\n\t\treturn <GameEndStatus />;\n\t}\n\treturn <Timer />;\n}\n\nfunction Tile(props) {\n  return (\n    <button className=\"tile\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction Board() {\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  var [tiles, setTiles] = useState(initialTiles);\n\tvar [gameEnd, setGameEnd] = useState(false);\n  const pressed = useKeyPress();\n\n  function renderTile(i, j) {\n    return <Tile value={tiles[i][j]}/>;\n  }\n\tfunction renderStatus() {\n\t\treturn <StatusBar gameEnd={gameOver(tiles)}/>\n\t}\n  function renderRow(i) {\n    return (\n      <div className=\"board-row\">\n        {renderTile(i, 0)}\n        {renderTile(i, 1)}\n        {renderTile(i, 2)}\n        {renderTile(i, 3)}\n      </div>\n    );\n  }\n  function updateBoard() {\n\t\tvar direction = pressed.direction;\n\t\tvar newTiles = updateTiles(tiles, direction);\n\t\tsetTiles(newTiles);\t\n\t\tconsole.log(gameOver(newTiles));\n\t\tsetGameEnd(gameOver(tiles)); //check if game over\n  }\n  useEffect(() => {\n\t\tupdateBoard();\n  }, [pressed]);\n\n  return (\n    <div>\n\t\t\t{renderStatus()}\n      {renderRow(0)}\n      {renderRow(1)}\n      {renderRow(2)}\n      {renderRow(3)}\n    </div>\n  );\n}\n\n// key press handler using vim keys\nfunction useKeyPress() {\n  const [keyPressed, setKeyPressed] = useState({direction: null});\n\n  function downHandler({ key }) {\n    let pressed = null;\n    switch (key) {\n      case \"k\":\n        pressed = DIRECTION.UP;\n        break;\n      case \"j\":\n        pressed = DIRECTION.DOWN;\n        break;\n      case \"h\":\n        pressed = DIRECTION.LEFT;\n        break;\n      case \"l\":\n        pressed = DIRECTION.RIGHT;\n        break;\n      default:\n        pressed = null;\n        break;\n    }\n    setKeyPressed({direction: pressed});\n    console.log(`pressed ${pressed}`);\n  }\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nfunction Game() {\n  //const initialTiles = [\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //];\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n    </div>\n  );\n}\n\n//function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}