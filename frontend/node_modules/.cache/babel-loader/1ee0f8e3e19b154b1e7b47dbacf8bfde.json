{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension, DIRECTION, winningTile } from \"./constants.js\";\nimport { updateTiles, gameOver } from \"./components/board.js\";\nimport Tile from \"./components/Tile.js\";\nimport Stopwatch from \"./components/Stopwatch.js\";\n\nconst startButton = () => {\n  return React.createElement(\"button\", {\n    className: \"startButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  });\n};\n\nconst GameEndStatus = () => {\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"You won!\");\n}; // props value is whether game is over\n\n\nconst StatusBar = props => {\n  const gameEnd = props.gameEnd;\n\n  if (gameEnd) {\n    return React.createElement(GameEndStatus, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(Stopwatch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  });\n}; //replaces board\n\n\nconst GameEndDisplay = () => {\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \" whooo \");\n}; // key press handler using vim keys\n\n\nconst useKeyPress = () => {\n  const _useState = useState({\n    direction: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        keyPressed = _useState2[0],\n        setKeyPressed = _useState2[1];\n\n  const downHandler = ({\n    key\n  }) => {\n    let pressed = null;\n\n    switch (key) {\n      case \"k\":\n        pressed = DIRECTION.UP;\n        break;\n\n      case \"j\":\n        pressed = DIRECTION.DOWN;\n        break;\n\n      case \"h\":\n        pressed = DIRECTION.LEFT;\n        break;\n\n      case \"l\":\n        pressed = DIRECTION.RIGHT;\n        break;\n\n      default:\n        pressed = null;\n        break;\n    }\n\n    setKeyPressed({\n      direction: pressed\n    });\n    console.log(\"pressed \".concat(pressed));\n  }; // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n};\n\nconst Game = () => {\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"game-board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  })));\n}; // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 86\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","createContext","useState","useEffect","ReactDOM","dimension","DIRECTION","winningTile","updateTiles","gameOver","Tile","Stopwatch","startButton","GameEndStatus","StatusBar","props","gameEnd","GameEndDisplay","useKeyPress","direction","keyPressed","setKeyPressed","downHandler","key","pressed","UP","DOWN","LEFT","RIGHT","console","log","window","addEventListener","removeEventListener","Game","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension, DIRECTION, winningTile } from \"./constants.js\";\nimport { updateTiles, gameOver } from \"./components/board.js\";\nimport Tile from \"./components/Tile.js\"\nimport Stopwatch from \"./components/Stopwatch.js\";\n\nconst startButton = () => {\n\treturn (\n\t\t<button className=\"startButton\">\n\t\t</button>\n\t);\t\n}\n\nconst GameEndStatus = () => {\n\treturn (<p>You won!</p>);\n}\n\n// props value is whether game is over\nconst StatusBar = (props) => {\n\tconst gameEnd = props.gameEnd;\n\tif (gameEnd) {\n\t\treturn <GameEndStatus />;\n\t}\n\treturn <Stopwatch />;\n}\n\n//replaces board\nconst GameEndDisplay = () => {\n\treturn (<p> whooo </p>);\t\n}\n\n\n// key press handler using vim keys\nconst useKeyPress = () => {\n  const [keyPressed, setKeyPressed] = useState({direction: null});\n\n  const downHandler = ({ key }) => {\n    let pressed = null;\n    switch (key) {\n      case \"k\":\n        pressed = DIRECTION.UP;\n        break;\n      case \"j\":\n        pressed = DIRECTION.DOWN;\n        break;\n      case \"h\":\n        pressed = DIRECTION.LEFT;\n        break;\n      case \"l\":\n        pressed = DIRECTION.RIGHT;\n        break;\n      default:\n        pressed = null;\n        break;\n    }\n    setKeyPressed({direction: pressed});\n    console.log(`pressed ${pressed}`);\n  }\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nconst Game = () => {\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n    </div>\n  );\n}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}