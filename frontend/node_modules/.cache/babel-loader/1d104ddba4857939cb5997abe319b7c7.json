{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/stopwatch.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nexport function Stopwatch() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      paused = _useState2[0],\n      setPaused = _useState2[1];\n\n  var _useState3 = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      time = _useState4[0],\n      setTime = _useState4[1]; // let one second pass\n\n\n  function tick() {\n    if (paused) {\n      // do nothing if paused\n      return;\n    }\n\n    var newHours = time.hours;\n    var newMinutes = time.minutes;\n    var newSeconds = time.seconds + 1;\n\n    if (newSeconds == 60) {\n      setTime({\n        hours: time.hours,\n        minutes: time.minutes + 1,\n        seconds: 0\n      });\n      newSeconds = 0;\n      newMinutes += 1;\n    }\n\n    if (newMinutes == 60) {\n      newMinutes = 0;\n      newHours += 1;\n    }\n\n    setTime({\n      hours: newHours,\n      minutes: newMinutes,\n      seconds: newSeconds\n    });\n  }\n\n  function reset() {\n    setTime({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    setPaused(false);\n  } // takes in int time component\n\n\n  function padTime(timeComponent) {\n    return timeComponent.toString().padStart(2, '0');\n  }\n\n  function formattedTime() {\n    var formattedHours = padTime(time.hours);\n    var formattedMinutes = padTime(time.minutes);\n    var formattedSeconds = padTime(time.seconds);\n    return \"\".concat(formattedHours, \": \").concat(formattedMinutes, \": \").concat(formattedSeconds);\n  }\n\n  useEffect(() => {\n    let timerId = setInterval(tick, 1000); // tick every 1000ms \n\n    return () => {\n      clearInterval(timerId);\n    };\n  });\n\n  function renderStopwatch() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, formattedTime()), React.createElement(\"button\", {\n      onClick: () => setPaused(!paused),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, paused ? 'Resume' : 'Pause'));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Stopwatch thing\"), renderStopwatch());\n}\nexport default {\n  Stopwatch\n};","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/stopwatch.js"],"names":["React","useState","useEffect","ReactDOM","serviceWorker","Stopwatch","paused","setPaused","hours","minutes","seconds","time","setTime","tick","newHours","newMinutes","newSeconds","reset","padTime","timeComponent","toString","padStart","formattedTime","formattedHours","formattedMinutes","formattedSeconds","timerId","setInterval","clearInterval","renderStopwatch"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AACA,OAAO,KAAKC,aAAZ,MAA+B,iBAA/B;AAEA,OAAO,SAASC,SAAT,GAAqB;AAAA,kBACDJ,QAAQ,CAAC,KAAD,CADP;AAAA;AAAA,MACtBK,MADsB;AAAA,MACdC,SADc;;AAAA,mBAELN,QAAQ,CAAC;AAC9BO,IAAAA,KAAK,EAAE,CADuB;AAE9BC,IAAAA,OAAO,EAAE,CAFqB;AAG9BC,IAAAA,OAAO,EAAE;AAHqB,GAAD,CAFH;AAAA;AAAA,MAEtBC,IAFsB;AAAA,MAEhBC,OAFgB,kBAQ3B;;;AACA,WAASC,IAAT,GAAgB;AACf,QAAIP,MAAJ,EAAY;AAAE;AACb;AACA;;AACD,QAAIQ,QAAQ,GAAGH,IAAI,CAACH,KAApB;AACA,QAAIO,UAAU,GAAGJ,IAAI,CAACF,OAAtB;AACA,QAAIO,UAAU,GAAGL,IAAI,CAACD,OAAL,GAAe,CAAhC;;AACA,QAAIM,UAAU,IAAI,EAAlB,EAAsB;AACrBJ,MAAAA,OAAO,CAAC;AACPJ,QAAAA,KAAK,EAAEG,IAAI,CAACH,KADL;AAEPC,QAAAA,OAAO,EAAEE,IAAI,CAACF,OAAL,GAAe,CAFjB;AAGPC,QAAAA,OAAO,EAAE;AAHF,OAAD,CAAP;AAKAM,MAAAA,UAAU,GAAG,CAAb;AACAD,MAAAA,UAAU,IAAI,CAAd;AACA;;AACD,QAAIA,UAAU,IAAI,EAAlB,EAAsB;AACrBA,MAAAA,UAAU,GAAG,CAAb;AACAD,MAAAA,QAAQ,IAAI,CAAZ;AACA;;AACDF,IAAAA,OAAO,CAAC;AACPJ,MAAAA,KAAK,EAAEM,QADA;AAEPL,MAAAA,OAAO,EAAEM,UAFF;AAGPL,MAAAA,OAAO,EAAEM;AAHF,KAAD,CAAP;AAKA;;AAED,WAASC,KAAT,GAAiB;AAChBL,IAAAA,OAAO,CAAC;AACPJ,MAAAA,KAAK,EAAE,CADA;AAEPC,MAAAA,OAAO,EAAE,CAFF;AAGPC,MAAAA,OAAO,EAAE;AAHF,KAAD,CAAP;AAKAH,IAAAA,SAAS,CAAC,KAAD,CAAT;AACA,GA3C0B,CA6C3B;;;AACA,WAASW,OAAT,CAAiBC,aAAjB,EAAgC;AAC/B,WAAOA,aAAa,CAACC,QAAd,GAAyBC,QAAzB,CAAkC,CAAlC,EAAqC,GAArC,CAAP;AACA;;AAED,WAASC,aAAT,GAAyB;AACxB,QAAIC,cAAc,GAAGL,OAAO,CAACP,IAAI,CAACH,KAAN,CAA5B;AACA,QAAIgB,gBAAgB,GAAGN,OAAO,CAACP,IAAI,CAACF,OAAN,CAA9B;AACA,QAAIgB,gBAAgB,GAAGP,OAAO,CAACP,IAAI,CAACD,OAAN,CAA9B;AACA,qBAAWa,cAAX,eAA8BC,gBAA9B,eAAmDC,gBAAnD;AACA;;AAEDvB,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIwB,OAAO,GAAGC,WAAW,CAACd,IAAD,EAAO,IAAP,CAAzB,CADe,CACwB;;AACvC,WAAO,MAAM;AACZe,MAAAA,aAAa,CAACF,OAAD,CAAb;AACA,KAFD;AAGA,GALQ,CAAT;;AAOA,WAASG,eAAT,GAA2B;AAC1B,WACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIP,aAAa,EAAjB,CADD,EAEC;AACC,MAAA,OAAO,EAAE,MAAMf,SAAS,CAAC,CAACD,MAAF,CADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEEA,MAAM,GAAG,QAAH,GAAc,OAFtB,CAFD,CADD;AASA;;AACD,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADD,EAEEuB,eAAe,EAFjB,CADD;AAMA;AAED,eAAe;AAAExB,EAAAA;AAAF,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react'; \nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nexport function Stopwatch() {\n\tvar [paused, setPaused] = useState(false);\n\tvar [time, setTime] = useState({\n\t\thours: 0,\n\t\tminutes: 0, \n\t\tseconds: 0,\n\t});\n\n\t// let one second pass\n\tfunction tick() {\n\t\tif (paused) { // do nothing if paused\n\t\t\treturn;\n\t\t}\n\t\tvar newHours = time.hours;\n\t\tvar newMinutes = time.minutes;\n\t\tvar newSeconds = time.seconds + 1;\n\t\tif (newSeconds == 60) {\n\t\t\tsetTime({\n\t\t\t\thours: time.hours,\n\t\t\t\tminutes: time.minutes + 1,\n\t\t\t\tseconds: 0,\n\t\t\t})\n\t\t\tnewSeconds = 0;\n\t\t\tnewMinutes += 1;\n\t\t}\n\t\tif (newMinutes == 60) {\n\t\t\tnewMinutes = 0;\n\t\t\tnewHours += 1;\n\t\t}\n\t\tsetTime({\n\t\t\thours: newHours,\n\t\t\tminutes: newMinutes,\n\t\t\tseconds: newSeconds,\n\t\t})\n\t}\n\n\tfunction reset() {\n\t\tsetTime({\n\t\t\thours: 0,\n\t\t\tminutes: 0,\n\t\t\tseconds: 0,\n\t\t});\n\t\tsetPaused(false);\n\t}\n\n\t// takes in int time component\n\tfunction padTime(timeComponent) {\n\t\treturn timeComponent.toString().padStart(2, '0');\n\t}\n\n\tfunction formattedTime() {\n\t\tvar formattedHours = padTime(time.hours);\n\t\tvar formattedMinutes = padTime(time.minutes);\n\t\tvar formattedSeconds = padTime(time.seconds);\n\t\treturn (`${formattedHours}: ${formattedMinutes}: ${formattedSeconds}`);\n\t}\n\n\tuseEffect(() => {\n\t\tlet timerId = setInterval(tick, 1000); // tick every 1000ms \n\t\treturn () => {\n\t\t\tclearInterval(timerId);\n\t\t}\n\t}); \n\n\tfunction renderStopwatch() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<p>{formattedTime()}</p>\n\t\t\t\t<button \n\t\t\t\t\tonClick={() => setPaused(!paused)}>\n\t\t\t\t\t{paused ? 'Resume' : 'Pause'}\n\t\t\t\t</button>\t\t\n\t\t\t</div>\n\t\t);\n\t}\n\treturn (\n\t\t<div>\n\t\t\t<p>Stopwatch thing</p>\n\t\t\t{renderStopwatch()}\n\t\t</div>\n\t);\n}\n\nexport default { Stopwatch };\n"]},"metadata":{},"sourceType":"module"}