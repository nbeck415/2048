{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nconst dimension = 4; //// return True if game over\n//function gameOver() {\n//return false;\n//}\n//// generates new num in random spot and updates board\n//function newNum(tiles) {\n//let newTiles = tiles.slice();\n//let row = Math.floor(Math.random() * dimension);\n//let col = Math.floor(Math.random() * dimension);\n//if (tiles[row][col] === 0) {\n//newTiles[row][col] = 2;\n//} else {\n//newNum(tiles);\n//}\n//return newTiles;\n//}\n//function Tile(props) {\n//return (\n//<button className=\"tile\" onClick={props.onClick}>\n//{props.value}\n//</button>\n//);\n//}\n//function createBoard() {\n//let tiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n//let newTiles = newNum(tiles);\n//return newTiles;\n//}\n////class Board extends React.Component {\n//function Board(props) {\n//const [tiles, setTiles]: useState([]);\n//const [gameOver, setGameOver]: useState(false);\n//// hook: on keypress, setState to change tiles\n//useEffect(() => {\n//setTiles = createBoard();\n//});\n//renderTile(i, j) {\n//return (\n//<Tile\n//value={this.state.tiles[i][j]}\n//onClick={() => this.handleClick(i, j)}\n///>\n//);\n//}\n//renderRow(i) {\n//return (\n//<div className=\"board-row\">\n//{this.renderTile(i, 0)}\n//{this.renderTile(i, 1)}\n//{this.renderTile(i, 2)}\n//{this.renderTile(i, 3)}\n//</div>\n//);\n//}\n//render() {\n//let status = true; // later: replace status with timer\n////const winner = calculateWinner(this.state.tiles);\n////let status;\n////if (winner) {\n////status = 'Winner: ' + winner;\n////} else {\n////status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n////}\n//return (\n//<div>\n//<div className=\"status\">{status}</div>\n//{this.renderRow(0)}\n//{this.renderRow(1)}\n//{this.renderRow(2)}\n//{this.renderRow(3)}\n//</div>\n//);\n//}\n//}\n// hook\n\nfunction useKeyPress() {\n  // State for keeping track of whether key is pressed\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        keyPressed = _useState2[0],\n        setKeyPressed = _useState2[1];\n\n  function move({\n    key\n  }) {\n    let pressed = '';\n\n    switch (key) {\n      case 'k':\n        pressed = 'up';\n        break;\n\n      case 'j':\n        pressed = 'down';\n        break;\n\n      case 'h':\n        pressed = 'left';\n        break;\n\n      case 'l':\n        pressed = 'right';\n        break;\n\n      default:\n        pressed = '';\n    }\n\n    console.log(\"pressed \".concat(pressed));\n  } //function downHandler({key}) {\n  ////console.log(\"key down\");\n  //if (key === targetKey) {\n  //setKeyPressed(true);\n  //}\n  //}\n  //function upHandler({key}) {\n  ////console.log(\"key up\");\n  //if (key === targetKey) {\n  //setKeyPressed(false);\n  //}\n  //}\n  // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener('keydown', move); //window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener('keydown', move); //window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n}\n\nfunction Game() {\n  //const upPress = useKeyPress('k');\n  //const downPress = useKeyPress('j');\n  //const leftPress = useKeyPress('h');\n  //const rightPress = useKeyPress('l');\n  const pressed = useKeyPress();\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, pressed)); //<div className=\"game-board\">\n  //<Board />\n  //</div>\n  //<div className=\"game-info\">\n  //<div>{[> status <]}</div>\n  //<ol>{[> TODO <]}</ol>\n  //</div>\n} //function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 186\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","useState","useEffect","ReactDOM","dimension","useKeyPress","keyPressed","setKeyPressed","move","key","pressed","console","log","window","addEventListener","removeEventListener","Game","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AAEA,MAAMC,SAAS,GAAG,CAAlB,C,CAEA;AACA;AACE;AACF;AAEA;AACA;AACE;AACA;AACA;AACA;AACE;AACF;AACE;AACF;AACA;AACF;AAEA;AACE;AACE;AACE;AACF;AACF;AACF;AAEA;AACE;AACA;AACA;AACF;AAEA;AACA;AACC;AACA;AACA;AACA;AACC;AACD;AACC;AACE;AACE;AACE;AACA;AACF;AACF;AACF;AACA;AACE;AACE;AACE;AACA;AACA;AACA;AACF;AACF;AACF;AAEA;AACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACE;AACE;AACA;AACA;AACA;AACA;AACF;AACF;AACF;AACF;AAEA;;AACA,SAASC,WAAT,GAAuB;AACtB;AADsB,oBAEcJ,QAAQ,CAAC,KAAD,CAFtB;AAAA;AAAA,QAEfK,UAFe;AAAA,QAEHC,aAFG;;AAItB,WAASC,IAAT,CAAc;AAAEC,IAAAA;AAAF,GAAd,EAAuB;AACtB,QAAIC,OAAO,GAAG,EAAd;;AACA,YAAOD,GAAP;AACC,WAAK,GAAL;AACCC,QAAAA,OAAO,GAAG,IAAV;AACA;;AACD,WAAK,GAAL;AACCA,QAAAA,OAAO,GAAG,MAAV;AACA;;AACD,WAAK,GAAL;AACCA,QAAAA,OAAO,GAAG,MAAV;AACA;;AACD,WAAK,GAAL;AACCA,QAAAA,OAAO,GAAG,OAAV;AACA;;AACD;AACCA,QAAAA,OAAO,GAAG,EAAV;AAdF;;AAgBAC,IAAAA,OAAO,CAACC,GAAR,mBAAuBF,OAAvB;AACA,GAvBqB,CAyBtB;AACC;AACA;AACC;AACD;AACD;AAEA;AACC;AACA;AACC;AACD;AACD;AAEE;;;AACDR,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCN,IAAnC,EADc,CAEd;AACA;;AACA,WAAO,MAAM;AACXK,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCP,IAAtC,EADW,CAEX;AACD,KAHD;AAID,GARQ,EAQN,EARM,CAAT,CAxCqB,CAgDb;AACT;;AAED,SAASQ,IAAT,GAAgB;AACf;AACA;AACA;AACA;AACA,QAAMN,OAAO,GAAGL,WAAW,EAA3B;AAEA,SACC;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEK,OADF,CADD,CADD,CAPe,CAeb;AACC;AACD;AACA;AACC;AACA;AACD;AACF,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEAP,QAAQ,CAACc,MAAT,CAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst dimension = 4;\n\n//// return True if game over\n//function gameOver() {\n  //return false;\n//}\n\n//// generates new num in random spot and updates board\n//function newNum(tiles) {\n  //let newTiles = tiles.slice();\n  //let row = Math.floor(Math.random() * dimension);\n  //let col = Math.floor(Math.random() * dimension);\n  //if (tiles[row][col] === 0) {\n    //newTiles[row][col] = 2;\n  //} else {\n    //newNum(tiles);\n  //}\n  //return newTiles;\n//}\n\n//function Tile(props) {\n  //return (\n    //<button className=\"tile\" onClick={props.onClick}>\n      //{props.value}\n    //</button>\n  //);\n//}\n\n//function createBoard() {\n  //let tiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  //let newTiles = newNum(tiles);\n  //return newTiles;\n//}\n\n////class Board extends React.Component {\n//function Board(props) {\n\t//const [tiles, setTiles]: useState([]);\n\t//const [gameOver, setGameOver]: useState(false);\n\t//// hook: on keypress, setState to change tiles\n\t//useEffect(() => {\n\t\t//setTiles = createBoard();\n\t//});\n  //renderTile(i, j) {\n    //return (\n      //<Tile\n        //value={this.state.tiles[i][j]}\n        //onClick={() => this.handleClick(i, j)}\n      ///>\n    //);\n  //}\n  //renderRow(i) {\n    //return (\n      //<div className=\"board-row\">\n        //{this.renderTile(i, 0)}\n        //{this.renderTile(i, 1)}\n        //{this.renderTile(i, 2)}\n        //{this.renderTile(i, 3)}\n      //</div>\n    //);\n  //}\n\n  //render() {\n    //let status = true; // later: replace status with timer\n    ////const winner = calculateWinner(this.state.tiles);\n    ////let status;\n    ////if (winner) {\n    ////status = 'Winner: ' + winner;\n    ////} else {\n    ////status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    ////}\n\n    //return (\n      //<div>\n        //<div className=\"status\">{status}</div>\n        //{this.renderRow(0)}\n        //{this.renderRow(1)}\n        //{this.renderRow(2)}\n        //{this.renderRow(3)}\n      //</div>\n    //);\n  //}\n//}\n\n// hook\nfunction useKeyPress() {\n\t// State for keeping track of whether key is pressed\n\tconst [keyPressed, setKeyPressed] = useState(false);\n\n\tfunction move({ key }) {\n\t\tlet pressed = '';\n\t\tswitch(key) {\n\t\t\tcase 'k':\n\t\t\t\tpressed = 'up';\n\t\t\t\tbreak;\n\t\t\tcase 'j': \n\t\t\t\tpressed = 'down';\n\t\t\t\tbreak;\n\t\t\tcase 'h':\n\t\t\t\tpressed = 'left';\n\t\t\t\tbreak;\n\t\t\tcase 'l':\n\t\t\t\tpressed = 'right';\n\t\t\t\tbreak;\n\t\t\tdefault: \n\t\t\t\tpressed = '';\n\t\t}\n\t\tconsole.log(`pressed ${pressed}`)\n\t}\n\n\t//function downHandler({key}) {\n\t\t////console.log(\"key down\");\n\t\t//if (key === targetKey) {\n\t\t\t//setKeyPressed(true);\n\t\t//}\n\t//}\n\n\t//function upHandler({key}) {\n\t\t////console.log(\"key up\");\n\t\t//if (key === targetKey) {\n\t\t\t//setKeyPressed(false);\n\t\t//}\n\t//}\n\n\t  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', move);\n    //window.addEventListener('keyup', upHandler);\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', move);\n      //window.removeEventListener('keyup', upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n}\n\nfunction Game() {\n\t//const upPress = useKeyPress('k');\n\t//const downPress = useKeyPress('j');\n\t//const leftPress = useKeyPress('h');\n\t//const rightPress = useKeyPress('l');\n\tconst pressed = useKeyPress(); \n\n\treturn (\n\t\t<div className=\"game\">\n\t\t\t<div>\n\t\t\t\t{pressed}\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\t\t\t//<div className=\"game-board\">\n\t\t\t\t//<Board />\n\t\t\t//</div>\n\t\t\t//<div className=\"game-info\">\n\t\t\t\t//<div>{[> status <]}</div>\n\t\t\t\t//<ol>{[> TODO <]}</ol>\n\t\t\t//</div>\n}\n\n//function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}