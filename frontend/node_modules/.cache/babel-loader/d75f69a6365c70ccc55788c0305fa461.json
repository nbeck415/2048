{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nconst dimension = 4; //// return True if game over\n//function gameOver() {\n//return false;\n//}\n// generates new num in random spot and updates board\n\nfunction newNum(tiles) {\n  let newTiles = tiles.slice();\n  let row = Math.floor(Math.random() * dimension);\n  let col = Math.floor(Math.random() * dimension);\n\n  if (tiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    newNum(tiles);\n  }\n\n  return newTiles;\n}\n\nfunction Tile(props) {\n  return React.createElement(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, props.value);\n} //function createBoard() {\n//let tiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n//let newTiles = newNum(tiles);\n//return newTiles;\n//}\n\n\nfunction updateBoard(tiles) {\n  return [];\n}\n\nfunction Board() {\n  let tiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  var _useState = useState(tiles),\n      _useState2 = _slicedToArray(_useState, 2),\n      titles = _useState2[0],\n      setTiles = _useState2[1];\n\n  function updateBoard() {\n    setTiles(newNum(tiles));\n    console.log(keyPressed);\n  }\n\n  useEffect(() => {\n    setTiles = updateBoard();\n  }, []);\n  return React.createElement(Tile, {\n    value: 2,\n    onClick: () => console.log(\"tile clicked\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  });\n} //function Board() {\n//const [tiles, setTiles]: useState([]);\n//const [gameOver, setGameOver]: useState(false);\n//// hook: on keypress, setState to change tiles\n//useEffect(() => {\n//setTiles = createBoard();\n//});\n//renderTile(i, j) {\n//return (\n//<Tile\n//value={this.state.tiles[i][j]}\n//onClick={() => this.handleClick(i, j)}\n///>\n//);\n//}\n//renderRow(i) {\n//return (\n//<div className=\"board-row\">\n//{this.renderTile(i, 0)}\n//{this.renderTile(i, 1)}\n//{this.renderTile(i, 2)}\n//{this.renderTile(i, 3)}\n//</div>\n//);\n//}\n//render() {\n//let status = true; // later: replace status with timer\n////const winner = calculateWinner(this.state.tiles);\n////let status;\n////if (winner) {\n////status = 'Winner: ' + winner;\n////} else {\n////status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n////}\n//return (\n//<div>\n//<div className=\"status\">{status}</div>\n//{this.renderRow(0)}\n//{this.renderRow(1)}\n//{this.renderRow(2)}\n//{this.renderRow(3)}\n//</div>\n//);\n//}\n//}\n// hook\n\n\nfunction useKeyPress() {\n  // State for keeping track of whether key is pressed\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        keyPressed = _useState4[0],\n        setKeyPressed = _useState4[1];\n\n  function move({\n    key\n  }) {\n    let pressed = '';\n\n    switch (key) {\n      case 'k':\n        pressed = 'up';\n        break;\n\n      case 'j':\n        pressed = 'down';\n        break;\n\n      case 'h':\n        pressed = 'left';\n        break;\n\n      case 'l':\n        pressed = 'right';\n        break;\n\n      default:\n        pressed = '';\n        break;\n    }\n\n    console.log(\"pressed \".concat(pressed));\n    return true;\n  }\n\n  function downHandler({\n    key\n  }) {\n    console.log(\"key down\");\n\n    if (move({\n      key\n    })) {\n      setKeyPressed(true);\n      console.log(keyPressed);\n    }\n  } // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n}\n\nfunction Game() {\n  const pressed = useKeyPress();\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"game-board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, pressed)); //<div className=\"game-board\">\n  //<Board />\n  //</div>\n  //<div className=\"game-info\">\n  //<div>{[> status <]}</div>\n  //<ol>{[> TODO <]}</ol>\n  //</div>\n} //function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 210\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","createContext","useState","useEffect","ReactDOM","dimension","newNum","tiles","newTiles","slice","row","Math","floor","random","col","Tile","props","onClick","value","updateBoard","Board","titles","setTiles","console","log","keyPressed","useKeyPress","setKeyPressed","move","key","pressed","downHandler","window","addEventListener","removeEventListener","Game","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst dimension = 4;\n\n//// return True if game over\n//function gameOver() {\n  //return false;\n//}\n\n// generates new num in random spot and updates board\nfunction newNum(tiles) {\n\tlet newTiles = tiles.slice();\n\tlet row = Math.floor(Math.random() * dimension);\n\tlet col = Math.floor(Math.random() * dimension);\n\tif (tiles[row][col] === 0) {\n\t\tnewTiles[row][col] = 2;\n\t} else {\n\t\tnewNum(tiles);\n\t}\n\treturn newTiles;\n}\n\nfunction Tile(props) {\n\treturn (\n\t\t<button className=\"tile\" onClick={props.onClick}>\n\t\t\t{props.value}\n\t\t</button>\n\t);\n}\n\n//function createBoard() {\n  //let tiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  //let newTiles = newNum(tiles);\n  //return newTiles;\n//}\n\nfunction updateBoard(tiles) {\n\treturn [];\n}\n\nfunction Board() {\n\tlet tiles = [\n\t\t\t\t\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t\t\t\t];\n\tvar [titles, setTiles] = useState(tiles);\n\n\tfunction updateBoard() {\n\t\tsetTiles(newNum(tiles));\n\t\tconsole.log(keyPressed);\n\t}\n\n\tuseEffect(() => {\n\t\tsetTiles = updateBoard();\n\t}, []);\n\n\treturn ( \n\t\t<Tile \n\t\t\tvalue={2}\n\t\t\tonClick={() => console.log(\"tile clicked\")}\n\t\t/> \n\t);\n}\n\n//function Board() {\n\t//const [tiles, setTiles]: useState([]);\n\t//const [gameOver, setGameOver]: useState(false);\n\t//// hook: on keypress, setState to change tiles\n\t//useEffect(() => {\n\t\t//setTiles = createBoard();\n\t//});\n\t//renderTile(i, j) {\n\t\t//return (\n\t\t\t//<Tile\n\t\t\t\t//value={this.state.tiles[i][j]}\n\t\t\t\t//onClick={() => this.handleClick(i, j)}\n\t\t\t///>\n\t\t//);\n\t//}\n\t//renderRow(i) {\n\t\t//return (\n\t\t\t//<div className=\"board-row\">\n\t\t\t\t//{this.renderTile(i, 0)}\n\t\t\t\t//{this.renderTile(i, 1)}\n\t\t\t\t//{this.renderTile(i, 2)}\n\t\t\t\t//{this.renderTile(i, 3)}\n\t\t\t//</div>\n\t\t//);\n\t//}\n\n\t//render() {\n\t\t//let status = true; // later: replace status with timer\n\t\t////const winner = calculateWinner(this.state.tiles);\n\t\t////let status;\n\t\t////if (winner) {\n\t\t////status = 'Winner: ' + winner;\n\t\t////} else {\n\t\t////status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\t\t////}\n\n\t\t//return (\n\t\t\t//<div>\n\t\t\t\t//<div className=\"status\">{status}</div>\n\t\t\t\t//{this.renderRow(0)}\n\t\t\t\t//{this.renderRow(1)}\n\t\t\t\t//{this.renderRow(2)}\n\t\t\t\t//{this.renderRow(3)}\n\t\t\t//</div>\n\t\t//);\n\t//}\n//}\n\n// hook\nfunction useKeyPress() {\n\t// State for keeping track of whether key is pressed\n\tconst [keyPressed, setKeyPressed] = useState(false);\n\n\tfunction move({ key }) {\n\t\tlet pressed = '';\n\t\tswitch(key) {\n\t\t\tcase 'k':\n\t\t\t\tpressed = 'up';\n\t\t\t\tbreak;\n\t\t\tcase 'j': \n\t\t\t\tpressed = 'down';\n\t\t\t\tbreak;\n\t\t\tcase 'h':\n\t\t\t\tpressed = 'left';\n\t\t\t\tbreak;\n\t\t\tcase 'l':\n\t\t\t\tpressed = 'right';\n\t\t\t\tbreak;\n\t\t\tdefault: \n\t\t\t\tpressed = '';\n\t\t\t\tbreak;\n\t\t}\n\t\tconsole.log(`pressed ${pressed}`)\n\t\treturn true;\n\t}\n\n\tfunction downHandler({key}) {\n\t\tconsole.log(\"key down\");\n\t\tif (move({key})) {\n\t\t\tsetKeyPressed(true);\n\t\t\tconsole.log(keyPressed);\n\t\t}\n\t}\n\n\n\t  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n}\n\nfunction Game() {\n\tconst pressed = useKeyPress(); \n\n\treturn (\n\t\t<div className=\"game\">\n\t\t\t<div className=\"game-board\">\n\t\t\t\t<Board />\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t{pressed}\n\t\t\t</div>\n\t\t</div>\n\t);\n\n\t\t\t//<div className=\"game-board\">\n\t\t\t\t//<Board />\n\t\t\t//</div>\n\t\t\t//<div className=\"game-info\">\n\t\t\t\t//<div>{[> status <]}</div>\n\t\t\t\t//<ol>{[> TODO <]}</ol>\n\t\t\t//</div>\n}\n\n//function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}