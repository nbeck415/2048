{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nconst dimension = 4; // return True if game over\n\nfunction gameOver() {\n  return false;\n} // generates new num in random spot and updates board\n\n\nfunction newNum(tiles) {\n  let newTiles = tiles.slice();\n  let row = Math.floor(Math.random() * dimension);\n  let col = Math.floor(Math.random() * dimension);\n\n  if (tiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    newNum(tiles);\n  }\n\n  return newTiles;\n}\n\nfunction Tile(props) {\n  return React.createElement(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, props.value);\n}\n\nfunction Board() {\n  let status = true; // later: replace status with timer\n\n  let tiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  var _useState = useState(tiles),\n      _useState2 = _slicedToArray(_useState, 2),\n      titles = _useState2[0],\n      setTiles = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1];\n\n  function renderTile(i, j) {\n    return React.createElement(Tile, {\n      value: tiles[i][j],\n      onClick: () => updateBoard(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    });\n  }\n\n  function renderRow(i) {\n    return React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, renderTile(i, 0), renderTile(i, 1), renderTile(i, 2), renderTile(i, 3));\n  }\n\n  function updateBoard() {\n    setTiles(newNum(tiles));\n    console.log(tiles);\n  }\n\n  useEffect(() => {\n    setTiles = updateBoard();\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, status), renderRow(0), renderRow(1), renderRow(2), renderRow(3));\n} // hook\n\n\nfunction useKeyPress() {\n  // State for keeping track of whether key is pressed\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        keyPressed = _useState6[0],\n        setKeyPressed = _useState6[1];\n\n  function move({\n    key\n  }) {\n    let pressed = \"\";\n\n    switch (key) {\n      case \"k\":\n        pressed = \"up\";\n        break;\n\n      case \"j\":\n        pressed = \"down\";\n        break;\n\n      case \"h\":\n        pressed = \"left\";\n        break;\n\n      case \"l\":\n        pressed = \"right\";\n        break;\n\n      default:\n        pressed = \"\";\n        break;\n    }\n\n    console.log(\"pressed \".concat(pressed));\n    return true;\n  }\n\n  function downHandler({\n    key\n  }) {\n    console.log(\"key down\");\n\n    if (move({\n      key\n    })) {\n      setKeyPressed(true); //TO DO: not as expected??? always false\n\n      console.log(keyPressed);\n    }\n  } // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler); // Remove event listeners on cleanup\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n}\n\nfunction Game() {\n  const pressed = useKeyPress();\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, pressed), React.createElement(\"div\", {\n    className: \"game-board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })));\n} //function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 155\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","createContext","useState","useEffect","ReactDOM","dimension","gameOver","newNum","tiles","newTiles","slice","row","Math","floor","random","col","Tile","props","onClick","value","Board","status","titles","setTiles","setGameOver","renderTile","i","j","updateBoard","renderRow","console","log","useKeyPress","keyPressed","setKeyPressed","move","key","pressed","downHandler","window","addEventListener","removeEventListener","Game","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,QAA/B,EAAyCC,SAAzC,QAA0D,OAA1D;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;AAEA,MAAMC,SAAS,GAAG,CAAlB,C,CAEA;;AACA,SAASC,QAAT,GAAoB;AAClB,SAAO,KAAP;AACD,C,CAED;;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AACrB,MAAIC,QAAQ,GAAGD,KAAK,CAACE,KAAN,EAAf;AACA,MAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,SAA3B,CAAV;AACA,MAAIU,GAAG,GAAGH,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBT,SAA3B,CAAV;;AACA,MAAIG,KAAK,CAACG,GAAD,CAAL,CAAWI,GAAX,MAAoB,CAAxB,EAA2B;AACzBN,IAAAA,QAAQ,CAACE,GAAD,CAAR,CAAcI,GAAd,IAAqB,CAArB;AACD,GAFD,MAEO;AACLR,IAAAA,MAAM,CAACC,KAAD,CAAN;AACD;;AACD,SAAOC,QAAP;AACD;;AAED,SAASO,IAAT,CAAcC,KAAd,EAAqB;AACnB,SACE;AAAQ,IAAA,SAAS,EAAC,MAAlB;AAAyB,IAAA,OAAO,EAAEA,KAAK,CAACC,OAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,CAACE,KADT,CADF;AAKD;;AAED,SAASC,KAAT,GAAiB;AACf,MAAIC,MAAM,GAAG,IAAb,CADe,CACI;;AACnB,MAAIb,KAAK,GAAG,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAD,EAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAf,EAA6B,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA7B,EAA2C,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAA3C,CAAZ;;AAFe,kBAGUN,QAAQ,CAACM,KAAD,CAHlB;AAAA;AAAA,MAGVc,MAHU;AAAA,MAGFC,QAHE;;AAAA,qBAIiBrB,QAAQ,CAAC,KAAD,CAJzB;AAAA;AAAA,QAIRI,QAJQ;AAAA,QAIEkB,WAJF;;AAMf,WAASC,UAAT,CAAoBC,CAApB,EAAuBC,CAAvB,EAA0B;AACxB,WAAO,oBAAC,IAAD;AAAM,MAAA,KAAK,EAAEnB,KAAK,CAACkB,CAAD,CAAL,CAASC,CAAT,CAAb;AAA0B,MAAA,OAAO,EAAE,MAAMC,WAAW,EAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD;;AACD,WAASC,SAAT,CAAmBH,CAAnB,EAAsB;AACpB,WACE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,UAAU,CAACC,CAAD,EAAI,CAAJ,CADb,EAEGD,UAAU,CAACC,CAAD,EAAI,CAAJ,CAFb,EAGGD,UAAU,CAACC,CAAD,EAAI,CAAJ,CAHb,EAIGD,UAAU,CAACC,CAAD,EAAI,CAAJ,CAJb,CADF;AAQD;;AACD,WAASE,WAAT,GAAuB;AACrBL,IAAAA,QAAQ,CAAChB,MAAM,CAACC,KAAD,CAAP,CAAR;AACAsB,IAAAA,OAAO,CAACC,GAAR,CAAYvB,KAAZ;AACD;;AAEDL,EAAAA,SAAS,CAAC,MAAM;AACdoB,IAAAA,QAAQ,GAAGK,WAAW,EAAtB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBP,MAAzB,CADF,EAEGQ,SAAS,CAAC,CAAD,CAFZ,EAGGA,SAAS,CAAC,CAAD,CAHZ,EAIGA,SAAS,CAAC,CAAD,CAJZ,EAKGA,SAAS,CAAC,CAAD,CALZ,CADF;AASD,C,CAED;;;AACA,SAASG,WAAT,GAAuB;AACrB;AADqB,qBAEe9B,QAAQ,CAAC,KAAD,CAFvB;AAAA;AAAA,QAEd+B,UAFc;AAAA,QAEFC,aAFE;;AAIrB,WAASC,IAAT,CAAc;AAAEC,IAAAA;AAAF,GAAd,EAAuB;AACrB,QAAIC,OAAO,GAAG,EAAd;;AACA,YAAQD,GAAR;AACE,WAAK,GAAL;AACEC,QAAAA,OAAO,GAAG,IAAV;AACA;;AACF,WAAK,GAAL;AACEA,QAAAA,OAAO,GAAG,MAAV;AACA;;AACF,WAAK,GAAL;AACEA,QAAAA,OAAO,GAAG,MAAV;AACA;;AACF,WAAK,GAAL;AACEA,QAAAA,OAAO,GAAG,OAAV;AACA;;AACF;AACEA,QAAAA,OAAO,GAAG,EAAV;AACA;AAfJ;;AAiBAP,IAAAA,OAAO,CAACC,GAAR,mBAAuBM,OAAvB;AACA,WAAO,IAAP;AACD;;AAED,WAASC,WAAT,CAAqB;AAAEF,IAAAA;AAAF,GAArB,EAA8B;AAC5BN,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ;;AACA,QAAII,IAAI,CAAC;AAAEC,MAAAA;AAAF,KAAD,CAAR,EAAmB;AACjBF,MAAAA,aAAa,CAAC,IAAD,CAAb,CADiB,CAEjB;;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYE,UAAZ;AACD;AACF,GAlCoB,CAoCrB;;;AACA9B,EAAAA,SAAS,CAAC,MAAM;AACdoC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCF,WAAnC,EADc,CAGd;;AACA,WAAO,MAAM;AACXC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCH,WAAtC;AACD,KAFD;AAGD,GAPQ,EAON,EAPM,CAAT,CArCqB,CA4Cb;AACT;;AAED,SAASI,IAAT,GAAgB;AACd,QAAML,OAAO,GAAGL,WAAW,EAA3B;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMK,OAAN,CADF,EAEE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAFF,CADF;AAQD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEAjC,QAAQ,CAACuC,MAAT,CAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\n\nconst dimension = 4;\n\n// return True if game over\nfunction gameOver() {\n  return false;\n}\n\n// generates new num in random spot and updates board\nfunction newNum(tiles) {\n  let newTiles = tiles.slice();\n  let row = Math.floor(Math.random() * dimension);\n  let col = Math.floor(Math.random() * dimension);\n  if (tiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    newNum(tiles);\n  }\n  return newTiles;\n}\n\nfunction Tile(props) {\n  return (\n    <button className=\"tile\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction Board() {\n  let status = true; // later: replace status with timer\n  let tiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  var [titles, setTiles] = useState(tiles);\n  const [gameOver, setGameOver] = useState(false);\n\n  function renderTile(i, j) {\n    return <Tile value={tiles[i][j]} onClick={() => updateBoard()} />;\n  }\n  function renderRow(i) {\n    return (\n      <div className=\"board-row\">\n        {renderTile(i, 0)}\n        {renderTile(i, 1)}\n        {renderTile(i, 2)}\n        {renderTile(i, 3)}\n      </div>\n    );\n  }\n  function updateBoard() {\n    setTiles(newNum(tiles));\n    console.log(tiles);\n  }\n\n  useEffect(() => {\n    setTiles = updateBoard();\n  }, []);\n\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n      {renderRow(0)}\n      {renderRow(1)}\n      {renderRow(2)}\n      {renderRow(3)}\n    </div>\n  );\n}\n\n// hook\nfunction useKeyPress() {\n  // State for keeping track of whether key is pressed\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  function move({ key }) {\n    let pressed = \"\";\n    switch (key) {\n      case \"k\":\n        pressed = \"up\";\n        break;\n      case \"j\":\n        pressed = \"down\";\n        break;\n      case \"h\":\n        pressed = \"left\";\n        break;\n      case \"l\":\n        pressed = \"right\";\n        break;\n      default:\n        pressed = \"\";\n        break;\n    }\n    console.log(`pressed ${pressed}`);\n    return true;\n  }\n\n  function downHandler({ key }) {\n    console.log(\"key down\");\n    if (move({ key })) {\n      setKeyPressed(true);\n      //TO DO: not as expected??? always false\n      console.log(keyPressed);\n    }\n  }\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n\n    // Remove event listeners on cleanup\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n}\n\nfunction Game() {\n  const pressed = useKeyPress();\n\n  return (\n    <div className=\"game\">\n      <div>{pressed}</div>\n      <div className=\"game-board\">\n        <Board />\n      </div>\n    </div>\n  );\n}\n\n//function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}