{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension, DIRECTION, winningTile } from \"./constants.js\";\nimport { updateTiles, gameOver } from \"./board.js\";\nimport { Stopwatch } from \"./stopwatch.js\";\n\nfunction startButton() {\n  return React.createElement(\"button\", {\n    className: \"startButton\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  });\n}\n\nfunction GameEndStatus() {\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"You won!\");\n} // props value is whether game is over\n\n\nfunction StatusBar(props) {\n  const gameEnd = props.gameEnd;\n\n  if (gameEnd) {\n    return React.createElement(GameEndStatus, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    });\n  }\n\n  return React.createElement(Stopwatch, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  });\n} //replaces board\n\n\nfunction GameEndDisplay() {\n  return React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \" whooo \");\n}\n\nfunction Tile(props) {\n  return React.createElement(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, props.value);\n}\n\nfunction Board() {\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  var _useState = useState(initialTiles),\n      _useState2 = _slicedToArray(_useState, 2),\n      tiles = _useState2[0],\n      setTiles = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      gameEnd = _useState4[0],\n      setGameEnd = _useState4[1];\n\n  const pressed = useKeyPress();\n\n  function renderTile(i, j) {\n    return React.createElement(Tile, {\n      value: tiles[i][j],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    });\n  }\n\n  function renderStatus() {\n    return React.createElement(StatusBar, {\n      gameEnd: gameEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    });\n  }\n\n  function renderRow(i) {\n    return React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, renderTile(i, 0), renderTile(i, 1), renderTile(i, 2), renderTile(i, 3));\n  }\n\n  function renderDisplay() {\n    if (gameEnd) {\n      return React.createElement(GameEndDisplay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, renderRow(0), renderRow(1), renderRow(2), renderRow(3));\n  }\n\n  function updateBoard() {\n    var direction = pressed.direction;\n\n    if (direction != null) {\n      // if valid key pressed\n      var newTiles = updateTiles(tiles, direction);\n      setTiles(newTiles);\n      setGameEnd(gameOver(tiles));\n    }\n  }\n\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, renderStatus(), renderDisplay());\n} // key press handler using vim keys\n\n\nfunction useKeyPress() {\n  const _useState5 = useState({\n    direction: null\n  }),\n        _useState6 = _slicedToArray(_useState5, 2),\n        keyPressed = _useState6[0],\n        setKeyPressed = _useState6[1];\n\n  function downHandler({\n    key\n  }) {\n    let pressed = null;\n\n    switch (key) {\n      case \"k\":\n        pressed = DIRECTION.UP;\n        break;\n\n      case \"j\":\n        pressed = DIRECTION.DOWN;\n        break;\n\n      case \"h\":\n        pressed = DIRECTION.LEFT;\n        break;\n\n      case \"l\":\n        pressed = DIRECTION.RIGHT;\n        break;\n\n      default:\n        pressed = null;\n        break;\n    }\n\n    setKeyPressed({\n      direction: pressed\n    });\n    console.log(\"pressed \".concat(pressed));\n  } // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nfunction Game() {\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"game-board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  }, React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  })));\n} //function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 165\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","createContext","useState","useEffect","ReactDOM","dimension","DIRECTION","winningTile","updateTiles","gameOver","Stopwatch","startButton","GameEndStatus","StatusBar","props","gameEnd","GameEndDisplay","Tile","onClick","value","Board","initialTiles","tiles","setTiles","setGameEnd","pressed","useKeyPress","renderTile","i","j","renderStatus","renderRow","renderDisplay","updateBoard","direction","newTiles","keyPressed","setKeyPressed","downHandler","key","UP","DOWN","LEFT","RIGHT","console","log","window","addEventListener","removeEventListener","Game","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension, DIRECTION, winningTile } from \"./constants.js\";\nimport { updateTiles, gameOver } from \"./board.js\";\nimport { Stopwatch } from \"./stopwatch.js\";\n\nfunction startButton() {\n  return <button className=\"startButton\"></button>;\n}\n\nfunction GameEndStatus() {\n  return <p>You won!</p>;\n}\n\n// props value is whether game is over\nfunction StatusBar(props) {\n  const gameEnd = props.gameEnd;\n  if (gameEnd) {\n    return <GameEndStatus />;\n  }\n  return <Stopwatch />;\n}\n\n//replaces board\nfunction GameEndDisplay() {\n  return <p> whooo </p>;\n}\n\nfunction Tile(props) {\n  return (\n    <button className=\"tile\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction Board() {\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  var [tiles, setTiles] = useState(initialTiles);\n  var [gameEnd, setGameEnd] = useState(false);\n  const pressed = useKeyPress();\n\n  function renderTile(i, j) {\n    return <Tile value={tiles[i][j]} />;\n  }\n  function renderStatus() {\n    return <StatusBar gameEnd={gameEnd} />;\n  }\n  function renderRow(i) {\n    return (\n      <div className=\"board-row\">\n        {renderTile(i, 0)}\n        {renderTile(i, 1)}\n        {renderTile(i, 2)}\n        {renderTile(i, 3)}\n      </div>\n    );\n  }\n  function renderDisplay() {\n    if (gameEnd) {\n      return <GameEndDisplay />;\n    }\n    return (\n      <div>\n        {renderRow(0)}\n        {renderRow(1)}\n        {renderRow(2)}\n        {renderRow(3)}\n      </div>\n    );\n  }\n  function updateBoard() {\n    var direction = pressed.direction;\n    if (direction != null) {\n      // if valid key pressed\n      var newTiles = updateTiles(tiles, direction);\n      setTiles(newTiles);\n      setGameEnd(gameOver(tiles));\n    }\n  }\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n\n  return (\n    <div>\n      {renderStatus()}\n      {renderDisplay()}\n    </div>\n  );\n}\n\n// key press handler using vim keys\nfunction useKeyPress() {\n  const [keyPressed, setKeyPressed] = useState({ direction: null });\n\n  function downHandler({ key }) {\n    let pressed = null;\n    switch (key) {\n      case \"k\":\n        pressed = DIRECTION.UP;\n        break;\n      case \"j\":\n        pressed = DIRECTION.DOWN;\n        break;\n      case \"h\":\n        pressed = DIRECTION.LEFT;\n        break;\n      case \"l\":\n        pressed = DIRECTION.RIGHT;\n        break;\n      default:\n        pressed = null;\n        break;\n    }\n    setKeyPressed({ direction: pressed });\n    console.log(`pressed ${pressed}`);\n  }\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nfunction Game() {\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n    </div>\n  );\n}\n\n//function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}