{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension } from \"./constants.js\"; //const dimension = 4;\n// return True if game over\n\nfunction gameOver() {\n  return false;\n} // TO DO: detect if no empty tiles left\n// generates new num in random spot and updates board\n\n\nfunction newNum(tiles) {\n  let newTiles = tiles.slice();\n  let row = Math.floor(Math.random() * dimension);\n  let col = Math.floor(Math.random() * dimension);\n\n  if (tiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    newNum(tiles);\n  }\n\n  return newTiles;\n} // return random row or col index\n\n\nfunction getIndex() {\n  return Math.floor(Math.random() * dimension);\n}\n\nfunction Tile(props) {\n  return React.createElement(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, props.value);\n}\n\nfunction shiftUp(tiles) {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = 0; col < dimension; col++) {\n      tiles[row][col];\n    }\n  }\n\n  function shiftDown(tiles) {}\n\n  function Board() {\n    let status = true; // later: replace status with timer\n\n    let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n    var _useState = useState(initialTiles),\n        _useState2 = _slicedToArray(_useState, 2),\n        tiles = _useState2[0],\n        setTiles = _useState2[1];\n\n    const _useState3 = useState(false),\n          _useState4 = _slicedToArray(_useState3, 2),\n          gameOver = _useState4[0],\n          setGameOver = _useState4[1];\n\n    const pressed = useKeyPress();\n\n    function renderTile(i, j) {\n      return React.createElement(Tile, {\n        value: tiles[i][j],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      });\n    }\n\n    function renderRow(i) {\n      return React.createElement(\"div\", {\n        className: \"board-row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, renderTile(i, 0), renderTile(i, 1), renderTile(i, 2), renderTile(i, 3));\n    }\n\n    function updateBoard() {\n      setTiles(newNum(tiles));\n\n      if (pressed === 'up') {}\n    }\n\n    console.log(tiles);\n  }\n\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, pressed), React.createElement(\"div\", {\n    className: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, status), renderRow(0), renderRow(1), renderRow(2), renderRow(3));\n} // key press handler using vim keys\n\n\nfunction useKeyPress() {\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        keyPressed = _useState6[0],\n        setKeyPressed = _useState6[1];\n\n  function move({\n    key\n  }) {\n    let pressed = \"\";\n\n    switch (key) {\n      case \"k\":\n        pressed = \"up\";\n        break;\n\n      case \"j\":\n        pressed = \"down\";\n        break;\n\n      case \"h\":\n        pressed = \"left\";\n        break;\n\n      case \"l\":\n        pressed = \"right\";\n        break;\n\n      default:\n        pressed = null;\n        break;\n    }\n\n    setKeyPressed(pressed);\n    console.log(\"pressed \".concat(pressed));\n  } // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", move);\n    return () => {\n      window.removeEventListener(\"keydown\", move);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nfunction Game() {\n  //const initialTiles = [\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //];\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"game-board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  })));\n} //function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 172\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","createContext","useState","useEffect","ReactDOM","dimension","gameOver","newNum","tiles","newTiles","slice","row","Math","floor","random","col","getIndex","Tile","props","onClick","value","shiftUp","shiftDown","Board","status","initialTiles","setTiles","setGameOver","pressed","useKeyPress","renderTile","i","j","renderRow","updateBoard","console","log","keyPressed","setKeyPressed","move","key","window","addEventListener","removeEventListener","Game","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension } from \"./constants.js\";\n\n//const dimension = 4;\n\n// return True if game over\nfunction gameOver() {\n  return false;\n}\n\n// TO DO: detect if no empty tiles left\n// generates new num in random spot and updates board\nfunction newNum(tiles) {\n  let newTiles = tiles.slice();\n  let row = Math.floor(Math.random() * dimension);\n  let col = Math.floor(Math.random() * dimension);\n  if (tiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    newNum(tiles);\n  }\n  return newTiles;\n}\n\n// return random row or col index\nfunction getIndex() {\n  return Math.floor(Math.random() * dimension);\n}\n\nfunction Tile(props) {\n  return (\n    <button className=\"tile\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction shiftUp(tiles) {\n\tfor (let row = 0; row < dimension; row++) {\n\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\ttiles[row][col]\t\n\t}\n}\n\nfunction shiftDown(tiles) {\n}\n\nfunction Board() {\n  let status = true; // later: replace status with timer\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  var [tiles, setTiles] = useState(initialTiles);\n  const [gameOver, setGameOver] = useState(false);\n  const pressed = useKeyPress();\n\n  function renderTile(i, j) {\n    return <Tile value={tiles[i][j]}/>;\n  }\n  function renderRow(i) {\n    return (\n      <div className=\"board-row\">\n        {renderTile(i, 0)}\n        {renderTile(i, 1)}\n        {renderTile(i, 2)}\n        {renderTile(i, 3)}\n      </div>\n    );\n  }\n  function updateBoard() {\n    setTiles(newNum(tiles));\n\t\tif (pressed === 'up')\t{\n\t\t\t}\n\t\t}\t\t\n\n    console.log(tiles);\n  }\n  useEffect(() => {\n\t\tupdateBoard();\n  }, [pressed]);\n\n  return (\n    <div>\n      <div>{pressed}</div>\n      <div className=\"status\">{status}</div>\n      {renderRow(0)}\n      {renderRow(1)}\n      {renderRow(2)}\n      {renderRow(3)}\n    </div>\n  );\n}\n\n// key press handler using vim keys\nfunction useKeyPress() {\n  const [keyPressed, setKeyPressed] = useState(null);\n\n  function move({ key }) {\n    let pressed = \"\";\n    switch (key) {\n      case \"k\":\n        pressed = \"up\";\n        break;\n      case \"j\":\n        pressed = \"down\";\n        break;\n      case \"h\":\n        pressed = \"left\";\n        break;\n      case \"l\":\n        pressed = \"right\";\n        break;\n      default:\n        pressed = null;\n        break;\n    }\n    setKeyPressed(pressed);\n    console.log(`pressed ${pressed}`);\n  }\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", move);\n\n    return () => {\n      window.removeEventListener(\"keydown\", move);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nfunction Game() {\n  //const initialTiles = [\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //];\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n    </div>\n  );\n}\n\n//function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}