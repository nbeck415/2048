{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/2048-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/2048-frontend/src/components/Stopwatch.js\";\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameContext from \"../gameContext.js\";\n\nconst Stopwatch = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        paused = _useState2[0],\n        setPaused = _useState2[1];\n\n  const _useState3 = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  }),\n        _useState4 = _slicedToArray(_useState3, 2),\n        time = _useState4[0],\n        setTime = _useState4[1];\n\n  const _useState5 = useState('00:00:00'),\n        _useState6 = _slicedToArray(_useState5, 2),\n        timeString = _useState6[0],\n        setTimeString = _useState6[1]; // let one second pass\n\n\n  const tick = () => {\n    if (paused) {\n      // do nothing if paused\n      return;\n    }\n\n    var newHours = time.hours;\n    var newMinutes = time.minutes;\n    var newSeconds = time.seconds + 1;\n\n    if (newSeconds == 60) {\n      setTime({\n        hours: time.hours,\n        minutes: time.minutes + 1,\n        seconds: 0\n      });\n      newSeconds = 0;\n      newMinutes += 1;\n    }\n\n    if (newMinutes == 60) {\n      newMinutes = 0;\n      newHours += 1;\n    }\n\n    setTime({\n      hours: newHours,\n      minutes: newMinutes,\n      seconds: newSeconds\n    });\n  };\n\n  const reset = () => {\n    setTime({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    setPaused(false);\n  }; // takes in int time component\n\n\n  const padTime = timeComponent => {\n    return timeComponent.toString().padStart(2, \"0\");\n  };\n\n  const formattedTime = () => {\n    var formattedHours = padTime(time.hours);\n    var formattedMinutes = padTime(time.minutes);\n    var formattedSeconds = padTime(time.seconds);\n    var timeString = \"\".concat(formattedHours, \": \").concat(formattedMinutes, \": \").concat(formattedSeconds);\n    props.setGameTime(timeString);\n    return timeString;\n  };\n\n  useEffect(() => {\n    let timerId = setInterval(tick, 1000); // tick every 1000ms\n\n    return () => {\n      clearInterval(timerId);\n    };\n  });\n\n  const renderStopwatch = () => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, formattedTime()), React.createElement(\"button\", {\n      onClick: () => setPaused(!paused),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, paused ? \"Resume\" : \"Pause\"));\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Time \"), renderStopwatch());\n};\n\nexport default Stopwatch;","map":{"version":3,"sources":["/home/lregina/onboarding/2048/2048-frontend/src/components/Stopwatch.js"],"names":["React","createContext","useState","useEffect","useContext","ReactDOM","GameContext","Stopwatch","props","paused","setPaused","hours","minutes","seconds","time","setTime","timeString","setTimeString","tick","newHours","newMinutes","newSeconds","reset","padTime","timeComponent","toString","padStart","formattedTime","formattedHours","formattedMinutes","formattedSeconds","setGameTime","timerId","setInterval","clearInterval","renderStopwatch"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect, useContext } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GameContext from \"../gameContext.js\"\n\nconst Stopwatch = props => {\n  const [paused, setPaused] = useState(false);\n  const [time, setTime] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n\tconst [timeString, setTimeString] = useState('00:00:00');\n\n  // let one second pass\n  const tick = () => {\n    if (paused) {\n      // do nothing if paused\n      return;\n    }\n    var newHours = time.hours;\n    var newMinutes = time.minutes;\n    var newSeconds = time.seconds + 1;\n    if (newSeconds == 60) {\n      setTime({\n        hours: time.hours,\n        minutes: time.minutes + 1,\n        seconds: 0\n      });\n      newSeconds = 0;\n      newMinutes += 1;\n    }\n    if (newMinutes == 60) {\n      newMinutes = 0;\n      newHours += 1;\n    }\n    setTime({\n      hours: newHours,\n      minutes: newMinutes,\n      seconds: newSeconds\n    });\n  };\n\n  const reset = () => {\n    setTime({\n      hours: 0,\n      minutes: 0,\n      seconds: 0\n    });\n    setPaused(false);\n  };\n\n  // takes in int time component\n  const padTime = timeComponent => {\n    return timeComponent.toString().padStart(2, \"0\");\n  };\n\n  const formattedTime = () => {\n    var formattedHours = padTime(time.hours);\n    var formattedMinutes = padTime(time.minutes);\n    var formattedSeconds = padTime(time.seconds);\n\t\tvar timeString = \n\t\t\t\t`${formattedHours}: ${formattedMinutes}: ${formattedSeconds}`;\n\n\t\tprops.setGameTime(timeString);\n\t\treturn timeString;\n  };\n\n  useEffect(() => {\n    let timerId = setInterval(tick, 1000); // tick every 1000ms\n    return () => {\n      clearInterval(timerId);\n    };\n  });\n\n  const renderStopwatch = () => {\n    return (\n      <div>\n        <p>{formattedTime()}</p>\n        <button onClick={() => setPaused(!paused)}>\n          {paused ? \"Resume\" : \"Pause\"}\n        </button>\n      </div>\n    );\n  };\n  return (\n    <div>\n      <p>Time </p>\n      {renderStopwatch()}\n    </div>\n\t)\n};\n\nexport default Stopwatch;\n"]},"metadata":{},"sourceType":"module"}