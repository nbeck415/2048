{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension } from './constants.js'; //const dimension = 4;\n// return True if game over\n\nfunction gameOver() {\n  return false;\n} // generates new num in random spot and updates board\n\n\nfunction newNum(tiles) {\n  let newTiles = tiles.slice();\n  let row = Math.floor(Math.random() * dimension);\n  let col = Math.floor(Math.random() * dimension);\n\n  if (tiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    newNum(tiles);\n  }\n\n  return newTiles;\n}\n\nfunction Tile(props) {\n  return React.createElement(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, props.value);\n}\n\nfunction Board() {\n  let status = true; // later: replace status with timer\n\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  var _useState = useState(initialTiles),\n      _useState2 = _slicedToArray(_useState, 2),\n      tiles = _useState2[0],\n      setTiles = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1];\n\n  const pressed = useKeyPress();\n\n  function renderTile(i, j) {\n    return React.createElement(Tile, {\n      value: tiles[i][j],\n      onClick: () => updateBoard(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    });\n  }\n\n  function renderRow(i) {\n    return React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, renderTile(i, 0), renderTile(i, 1), renderTile(i, 2), renderTile(i, 3));\n  }\n\n  function updateBoard() {\n    setTiles(newNum(tiles));\n    console.log(tiles);\n  }\n\n  useEffect(() => {\n    updateBoard();\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, pressed), React.createElement(\"div\", {\n    className: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, status), renderRow(0), renderRow(1), renderRow(2), renderRow(3));\n} // key press handler using vim keys\n\n\nfunction useKeyPress() {\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        keyPressed = _useState6[0],\n        setKeyPressed = _useState6[1];\n\n  function move({\n    key\n  }) {\n    let pressed = '';\n\n    switch (key) {\n      case 'k':\n        pressed = 'up';\n        break;\n\n      case 'j':\n        pressed = 'down';\n        break;\n\n      case 'h':\n        pressed = 'left';\n        break;\n\n      case 'l':\n        pressed = 'right';\n        break;\n\n      default:\n        pressed = '';\n        break;\n    }\n\n    console.log(\"pressed \".concat(pressed));\n  } // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener('keydown', move);\n    return () => {\n      window.removeEventListener('keydown', move);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return;\n}\n\nfunction Game() {\n  //const initialTiles = [\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //];\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"game-board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  })));\n} //function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 163\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","createContext","useState","useEffect","ReactDOM","dimension","gameOver","newNum","tiles","newTiles","slice","row","Math","floor","random","col","Tile","props","onClick","value","Board","status","initialTiles","setTiles","setGameOver","pressed","useKeyPress","renderTile","i","j","updateBoard","renderRow","console","log","keyPressed","setKeyPressed","move","key","window","addEventListener","removeEventListener","Game","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension } from './constants.js'\n\n//const dimension = 4;\n\n// return True if game over\nfunction gameOver() {\n\treturn false;\n}\n\n// generates new num in random spot and updates board\nfunction newNum(tiles) {\n\tlet newTiles = tiles.slice();\n\tlet row = Math.floor(Math.random() * dimension);\n\tlet col = Math.floor(Math.random() * dimension);\n\tif (tiles[row][col] === 0) {\n\t\tnewTiles[row][col] = 2;\n\t} else {\n\t\tnewNum(tiles);\n\t}\n\treturn newTiles;\n}\n\nfunction Tile(props) {\n\treturn (\n\t\t<button className=\"tile\" onClick={props.onClick}>\n\t\t\t{props.value}\n\t\t</button>\n\t);\n}\n\nfunction Board() {\n\tlet status = true; // later: replace status with timer\n\tlet initialTiles = [\n\t\t\t\t\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t\t\t\t];\n\tvar [tiles, setTiles] = useState(initialTiles);\n\tconst [gameOver, setGameOver] = useState(false);\n\tconst pressed = useKeyPress(); \n\n\tfunction renderTile(i, j) {\n\t\treturn (\n\t\t\t<Tile\n\t\t\t\tvalue={tiles[i][j]}\n\t\t\t\tonClick={() => updateBoard()}\n\t\t\t/>\n\t\t);\n\t}\n\tfunction renderRow(i) {\n\t\treturn (\n\t\t\t<div className=\"board-row\">\n\t\t\t\t{renderTile(i, 0)}\n\t\t\t\t{renderTile(i, 1)}\n\t\t\t\t{renderTile(i, 2)}\n\t\t\t\t{renderTile(i, 3)}\n\t\t\t</div>\n\t\t);\n\t}\n\tfunction updateBoard() {\n\t\tsetTiles(newNum(tiles));\n\t\tconsole.log(tiles);\n\t}\n\tuseEffect(() => {\n\t\tupdateBoard();\n\t}, []);\n\n\treturn (\n\t\t<div>\n\t\t\t<div>\n\t\t\t\t{pressed}\n\t\t\t</div>\n\t\t\t<div className=\"status\">{status}</div>\n\t\t\t{renderRow(0)}\n\t\t\t{renderRow(1)}\n\t\t\t{renderRow(2)}\n\t\t\t{renderRow(3)}\n\t\t</div>\n\t);\n}\n\n// key press handler using vim keys\nfunction useKeyPress() {\n\tconst [keyPressed, setKeyPressed] = useState(null);\n\n\tfunction move({ key }) {\n\t\tlet pressed = '';\n\t\tswitch(key) {\n\t\t\tcase 'k':\n\t\t\t\tpressed = 'up';\n\t\t\t\tbreak;\n\t\t\tcase 'j': \n\t\t\t\tpressed = 'down';\n\t\t\t\tbreak;\n\t\t\tcase 'h':\n\t\t\t\tpressed = 'left';\n\t\t\t\tbreak;\n\t\t\tcase 'l':\n\t\t\t\tpressed = 'right';\n\t\t\t\tbreak;\n\t\t\tdefault: \n\t\t\t\tpressed = '';\n\t\t\t\tbreak;\n\t\t}\n\t\tconsole.log(`pressed ${pressed}`)\n\t}\n\n\t  // Add event listeners\n  useEffect(() => {\n    window.addEventListener('keydown', move);\n\n    return () => {\n      window.removeEventListener('keydown', move);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n\treturn\n}\n\nfunction Game() {\n\t//const initialTiles = [\n\t\t\t\t\t\t\t\t//[0, 0, 0, 2],\n\t\t\t\t\t\t\t\t//[0, 0, 0, 2],\n\t\t\t\t\t\t\t\t//[0, 0, 0, 2],\n\t\t\t\t\t\t\t\t//[0, 0, 0, 2],\n\t\t\t\t\t\t\t\t//];\n\n\treturn (\n\t\t<div className=\"game\">\n\t\t\t<div className=\"game-board\">\n\t\t\t\t<Board />\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\n//function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}