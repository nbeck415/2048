{"ast":null,"code":"import { dimension, DIRECTION, winningTile } from \"./constants.js\"; //is there a better way of doing this\n\nexport function gameOver(newTiles) {} // side effect: modify newTiles\n\nexport function merge(newTiles, row1, col1, row2, col2) {\n  let currentVal = newTiles[row1][col1];\n  let adjacentVal = newTiles[row2][col2];\n  let newVal = currentVal + adjacentVal;\n  newTiles[row1][col1] = currentVal + adjacentVal;\n  newTiles[row2][col2] = 0;\n} // do \"sliding all the way\" when shift\n\nexport function slideUp(newTiles, col) {\n  //slide incrementally\n  for (let row = 0; row < dimension - 1; row++) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row + 1; //slide next available non blank tile\n\n      while (row2 < dimension - 1 && newTiles[row2][col] === 0) {\n        row2 += 1;\n      }\n\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n\n  return newTiles;\n}\n\nfunction slideLeft(newTiles, row) {\n  for (let col = 0; col < dimension - 1; col++) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col + 1;\n\n      while (col2 < dimension - 1 && newTiles[row][col2] === 0) {\n        col2 += 1;\n      }\n\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n\n  return newTiles;\n}\n\nexport function slideDown(newTiles, col) {\n  for (let row = dimension - 1; row > 0; row--) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row - 1;\n\n      while (row2 > 0 && newTiles[row2][col] === 0) {\n        row2 -= 1;\n      }\n\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n\n  return newTiles;\n}\n\nfunction slideRight(newTiles, row) {\n  for (let col = dimension - 1; col > 0; col--) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col - 1;\n\n      while (col2 > 0 && newTiles[row][col2] === 0) {\n        col2 -= 1;\n      }\n\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n\n  return newTiles;\n}\n\nexport function slideWholeBoard(newTiles, direction) {\n  for (let col = 0; col < dimension; col++) {\n    switch (direction) {\n      case DIRECTION.UP:\n        slideUp(newTiles, col);\n        break;\n\n      case DIRECTION.DOWN:\n        slideDown(newTiles, col);\n        break;\n\n      case DIRECTION.LEFT:\n        slideLeft(newTiles, col);\n        break;\n\n      case DIRECTION.RIGHT:\n        slideRight(newTiles, col);\n        break;\n\n      default:\n        console.log('not a direction');\n      //do nothing\n    }\n  }\n} // modify board with merged tiles newTiles up one\n\nfunction shiftUp(newTiles) {\n  for (let row = 0; row < dimension - 1; row++) {\n    for (let col = 0; col < dimension; col++) {\n      let nextRow = row + 1;\n\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n}\n\nfunction shiftLeft(newTiles) {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = 0; col < dimension - 1; col++) {\n      let nextCol = col + 1;\n\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n}\n\nfunction shiftDown(newTiles) {\n  for (let row = dimension - 1; row > 0; row--) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextRow = row - 1;\n\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n}\n\nfunction shiftRight(newTiles) {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextCol = col - 1;\n\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n}\n\nexport function fullMerge(newTiles, direction) {\n  switch (direction) {\n    case DIRECTION.UP:\n      shiftUp(newTiles);\n      break;\n\n    case DIRECTION.DOWN:\n      shiftDown(newTiles);\n      break;\n\n    case DIRECTION.LEFT:\n      shiftLeft(newTiles);\n      break;\n\n    case DIRECTION.RIGHT:\n      shiftRight(newTiles);\n      break;\n\n    default:\n      console.log('not a direction');\n    //do nothing\n  }\n} // return random row or col index\n\nfunction getRandomIndex() {\n  return Math.floor(Math.random() * dimension);\n} // TO DO: detect if no empty tiles left or it will infinitely loop\n// generates new num in random spot and updates board\n\n\nfunction generateNewNum(newTiles) {\n  let row = getRandomIndex();\n  let col = getRandomIndex();\n\n  if (newTiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    generateNewNum(newTiles);\n  }\n} // keep for testing\n// happens in one board update when key pressed\n\n\nexport function fullShift(newTiles, direction) {\n  slideWholeBoard(newTiles, direction);\n  fullMerge(newTiles, direction);\n  slideWholeBoard(newTiles, direction);\n  return newTiles;\n}\nexport function updateTiles(tiles, direction) {\n  var newTiles = [...tiles];\n  fullShift(newTiles, direction);\n  generateNewNum(newTiles);\n  return newTiles;\n}\nexport default {\n  merge,\n  slideUp,\n  slideDown,\n  slideWholeBoard,\n  fullMerge,\n  fullShift,\n  updateTiles\n};","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/board.js"],"names":["dimension","DIRECTION","winningTile","gameOver","newTiles","merge","row1","col1","row2","col2","currentVal","adjacentVal","newVal","slideUp","col","row","slideLeft","slideDown","slideRight","slideWholeBoard","direction","UP","DOWN","LEFT","RIGHT","console","log","shiftUp","nextRow","shiftLeft","nextCol","shiftDown","shiftRight","fullMerge","getRandomIndex","Math","floor","random","generateNewNum","fullShift","updateTiles","tiles"],"mappings":"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","sourcesContent":["import { dimension, DIRECTION, winningTile} from \"./constants.js\"; \n\n//is there a better way of doing this\nexport function gameOver(newTiles) {\n\t\n}\n\n// side effect: modify newTiles\nexport function merge(newTiles, row1, col1, row2, col2) {\n\tlet currentVal = newTiles[row1][col1];\n\tlet adjacentVal = newTiles[row2][col2];\n\tlet newVal = currentVal + adjacentVal\n\tnewTiles[row1][col1] = currentVal + adjacentVal; \n\tnewTiles[row2][col2] = 0;\n}\n\n// do \"sliding all the way\" when shift\nexport function slideUp(newTiles, col){\n\t//slide incrementally\n\tfor (let row = 0; row < dimension - 1; row++) {\n\t\tif (newTiles[row][col] === 0) {\n\t\t\tlet row2 = row + 1;\n\t\t\t//slide next available non blank tile\n\t\t\twhile (row2 < dimension - 1 && newTiles[row2][col] === 0) {\n\t\t\t\trow2 += 1;\n\t\t\t}\n\t\t\tmerge(newTiles, row, col, row2, col);\n\t\t}\t\n\t}\n\treturn newTiles;\n}\n\nfunction slideLeft(newTiles, row) {\n\tfor (let col = 0; col < dimension - 1; col ++) {\n\t\tif (newTiles[row][col] === 0) {\n\t\t\tlet col2 = col + 1;\n\t\t\twhile (col2 < dimension - 1 && newTiles[row][col2] === 0) {\n\t\t\t\tcol2 += 1;\n\t\t\t}\n\t\t\tmerge(newTiles, row, col, row, col2);\n\t\t}\t\n\t}\n\treturn newTiles;\n}\n\nexport function slideDown(newTiles, col){\n\tfor (let row = dimension - 1; row > 0; row--) {\n\t\tif (newTiles[row][col] === 0) {\n\t\t\tlet row2 = row - 1;\n\t\t\twhile (row2 > 0 && newTiles[row2][col] === 0) {\n\t\t\t\trow2 -= 1;\n\t\t\t}\n\t\t\tmerge(newTiles, row, col, row2, col);\n\t\t}\t\n\t}\n\treturn newTiles;\n}\n\nfunction slideRight(newTiles, row){\n\tfor (let col = dimension - 1; col > 0; col--) {\n\t\tif (newTiles[row][col] === 0) {\n\t\t\tlet col2 = col - 1;\n\t\t\twhile (col2 > 0 && newTiles[row][col2] === 0) {\n\t\t\t\tcol2 -= 1;\n\t\t\t}\n\t\t\tmerge(newTiles, row, col, row, col2);\n\t\t}\t\n\t}\n\treturn newTiles;\n}\n\nexport function slideWholeBoard(newTiles, direction) {\n\tfor (let col = 0; col < dimension; col++) {\n\t\tswitch(direction) {\n\t\t\tcase DIRECTION.UP:\n\t\t\t\tslideUp(newTiles, col);\t\t\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.DOWN:\n\t\t\t\tslideDown(newTiles, col);\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.LEFT:\n\t\t\t\tslideLeft(newTiles, col);\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.RIGHT:\n\t\t\t\tslideRight(newTiles, col);\n\t\t\t\tbreak;\n\t\t\tdefault: \n\t\t\t\tconsole.log('not a direction');\n\t\t\t\t//do nothing\n\t\t}\n\t}\n}\n\n// modify board with merged tiles newTiles up one\nfunction shiftUp(newTiles) {\n\tfor (let row = 0; row < dimension - 1; row++) {\n\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\tlet nextRow = row + 1;\n\t\t\tif (newTiles[row][col] === newTiles[nextRow][col]) {\n\t\t\t\tmerge(newTiles, row, col, nextRow, col)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction shiftLeft(newTiles) {\n\tfor (let row = 0; row < dimension; row++) {\n\t\tfor (let col = 0; col < dimension - 1; col++) {\n\t\t\tlet nextCol = col + 1;\n\t\t\tif (newTiles[row][col] === newTiles[row][nextCol]) {\n\t\t\t\tmerge(newTiles, row, col, row, nextCol)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction shiftDown(newTiles) {\n\tfor (let row = dimension - 1; row > 0; row--) {\n\t\tfor (let col = dimension - 1; col > 0; col--) {\n\t\t\tlet nextRow = row - 1;\n\t\t\tif (newTiles[row][col] === newTiles[nextRow][col]) {\n\t\t\t\tmerge(newTiles, row, col, nextRow, col)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction shiftRight(newTiles) {\n\tfor (let row = 0; row < dimension; row++) {\n\t\tfor (let col = dimension - 1; col > 0; col--) {\n\t\t\tlet nextCol = col - 1;\n\t\t\tif (newTiles[row][col] === newTiles[row][nextCol]) {\n\t\t\t\tmerge(newTiles, row, col, row, nextCol)\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function fullMerge(newTiles, direction) {\n\tswitch(direction) {\n\t\tcase DIRECTION.UP:\n\t\t\tshiftUp(newTiles);\n\t\t\tbreak;\n\t\tcase DIRECTION.DOWN:\n\t\t\tshiftDown(newTiles);\n\t\t\tbreak;\n\t\tcase DIRECTION.LEFT:\n\t\t\tshiftLeft(newTiles);\n\t\t\tbreak;\n\t\tcase DIRECTION.RIGHT:\n\t\t\tshiftRight(newTiles);\n\t\t\tbreak;\n\t\tdefault: \n\t\t\tconsole.log('not a direction');\n\t\t\t//do nothing\n\t}\n}\n\n// return random row or col index\nfunction getRandomIndex() {\n  return Math.floor(Math.random() * dimension);\n}\n\n// TO DO: detect if no empty tiles left or it will infinitely loop\n// generates new num in random spot and updates board\nfunction generateNewNum(newTiles) {\n\tlet row = getRandomIndex();\n\tlet col = getRandomIndex();\n  if (newTiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n\t\tgenerateNewNum(newTiles);\n  }\n}\n\n// keep for testing\n// happens in one board update when key pressed\nexport function fullShift(newTiles, direction) {\n\tslideWholeBoard(newTiles, direction);\n\tfullMerge(newTiles, direction);\n\tslideWholeBoard(newTiles, direction);\n\treturn newTiles;\n}\n\nexport function updateTiles(tiles, direction) {\n\tvar newTiles = [...tiles];\n\tfullShift(newTiles, direction)\n\tgenerateNewNum(newTiles);\n\treturn newTiles;\n}\n\nexport default { \n\tmerge, \n\tslideUp, \n\tslideDown, \n\tslideWholeBoard, \n\tfullMerge,\n\tfullShift, \n\tupdateTiles,\n};\n"]},"metadata":{},"sourceType":"module"}