{"ast":null,"code":"import { dimension, DIRECTION, winningTile } from \"../constants.js\"; //is there a better way of doing this\n\nconst gameOver = newTiles => {\n  for (let i = 0; i < dimension; i++) {\n    for (let j = 0; j < dimension; j++) {\n      if (newTiles[i][j] === winningTile) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}; // side effect: modify newTiles\n\n\nconst merge = (newTiles, row1, col1, row2, col2) => {\n  let currentVal = newTiles[row1][col1];\n  let adjacentVal = newTiles[row2][col2];\n  let newVal = currentVal + adjacentVal;\n  newTiles[row1][col1] = currentVal + adjacentVal;\n  newTiles[row2][col2] = 0;\n}; // do \"sliding all the way\" when shift\n\n\nconst slideUp = (newTiles, col) => {\n  //slide incrementally\n  for (let row = 0; row < dimension - 1; row++) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row + 1; //slide next available non blank tile\n\n      while (row2 < dimension - 1 && newTiles[row2][col] === 0) {\n        row2 += 1;\n      }\n\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideLeft = (newTiles, row) => {\n  for (let col = 0; col < dimension - 1; col++) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col + 1;\n\n      while (col2 < dimension - 1 && newTiles[row][col2] === 0) {\n        col2 += 1;\n      }\n\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideDown = (newTiles, col) => {\n  for (let row = dimension - 1; row > 0; row--) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row - 1;\n\n      while (row2 > 0 && newTiles[row2][col] === 0) {\n        row2 -= 1;\n      }\n\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideRight = (newTiles, row) => {\n  for (let col = dimension - 1; col > 0; col--) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col - 1;\n\n      while (col2 > 0 && newTiles[row][col2] === 0) {\n        col2 -= 1;\n      }\n\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideWholeBoard = (newTiles, direction) => {\n  for (let col = 0; col < dimension; col++) {\n    switch (direction) {\n      case DIRECTION.UP:\n        slideUp(newTiles, col);\n        break;\n\n      case DIRECTION.DOWN:\n        slideDown(newTiles, col);\n        break;\n\n      case DIRECTION.LEFT:\n        slideLeft(newTiles, col);\n        break;\n\n      case DIRECTION.RIGHT:\n        slideRight(newTiles, col);\n        break;\n\n      default:\n        console.log(\"not a direction\");\n      //do nothing\n    }\n  }\n}; // modify board with merged tiles newTiles up one\n\n\nconst shiftUp = newTiles => {\n  for (let row = 0; row < dimension - 1; row++) {\n    for (let col = 0; col < dimension; col++) {\n      let nextRow = row + 1;\n\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftLeft = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = 0; col < dimension - 1; col++) {\n      let nextCol = col + 1;\n\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst shiftDown = newTiles => {\n  for (let row = dimension - 1; row > 0; row--) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextRow = row - 1;\n\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftRight = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextCol = col - 1;\n\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst fullMerge = (newTiles, direction) => {\n  switch (direction) {\n    case DIRECTION.UP:\n      shiftUp(newTiles);\n      break;\n\n    case DIRECTION.DOWN:\n      shiftDown(newTiles);\n      break;\n\n    case DIRECTION.LEFT:\n      shiftLeft(newTiles);\n      break;\n\n    case DIRECTION.RIGHT:\n      shiftRight(newTiles);\n      break;\n\n    default:\n      console.log(\"not a direction\");\n    //do nothing\n  }\n}; // return random row or col index\n\n\nconst getRandomIndex = () => {\n  return Math.floor(Math.random() * dimension);\n}; // TO DO: detect if no empty tiles left or it will infinitely loop\n// generates new num in random spot and updates board\n\n\nconst generateNewNum = newTiles => {\n  let row = getRandomIndex();\n  let col = getRandomIndex();\n\n  if (newTiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    generateNewNum(newTiles);\n  }\n}; // keep for testing\n// happens in one board update when key pressed\n\n\nconst fullShift = (newTiles, direction) => {\n  slideWholeBoard(newTiles, direction);\n  fullMerge(newTiles, direction);\n  slideWholeBoard(newTiles, direction);\n  return newTiles;\n};\n\nconst updateTiles = (tiles, direction) => {\n  var newTiles = [...tiles];\n  fullShift(newTiles, direction);\n  generateNewNum(newTiles);\n  return newTiles;\n};\n\nexport { merge, slideUp, slideDown, slideWholeBoard, fullMerge, fullShift, updateTiles, gameOver };","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/components/board.js"],"names":["dimension","DIRECTION","winningTile","gameOver","newTiles","i","j","merge","row1","col1","row2","col2","currentVal","adjacentVal","newVal","slideUp","col","row","slideLeft","slideDown","slideRight","slideWholeBoard","direction","UP","DOWN","LEFT","RIGHT","console","log","shiftUp","nextRow","shiftLeft","nextCol","shiftDown","shiftRight","fullMerge","getRandomIndex","Math","floor","random","generateNewNum","fullShift","updateTiles","tiles"],"mappings":"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","sourcesContent":["import { dimension, DIRECTION, winningTile } from \"../constants.js\";\n\n\n//is there a better way of doing this\nconst gameOver = newTiles => {\n  for (let i = 0; i < dimension; i++) {\n    for (let j = 0; j < dimension; j++) {\n      if (newTiles[i][j] === winningTile) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// side effect: modify newTiles\nconst merge = (newTiles, row1, col1, row2, col2) => {\n  let currentVal = newTiles[row1][col1];\n  let adjacentVal = newTiles[row2][col2];\n  let newVal = currentVal + adjacentVal;\n  newTiles[row1][col1] = currentVal + adjacentVal;\n  newTiles[row2][col2] = 0;\n};\n\n// do \"sliding all the way\" when shift\nconst slideUp = (newTiles, col) => {\n  //slide incrementally\n  for (let row = 0; row < dimension - 1; row++) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row + 1;\n      //slide next available non blank tile\n      while (row2 < dimension - 1 && newTiles[row2][col] === 0) {\n        row2 += 1;\n      }\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n  return newTiles;\n};\n\nconst slideLeft = (newTiles, row) => {\n  for (let col = 0; col < dimension - 1; col++) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col + 1;\n      while (col2 < dimension - 1 && newTiles[row][col2] === 0) {\n        col2 += 1;\n      }\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n  return newTiles;\n};\n\nconst slideDown = (newTiles, col) => {\n  for (let row = dimension - 1; row > 0; row--) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row - 1;\n      while (row2 > 0 && newTiles[row2][col] === 0) {\n        row2 -= 1;\n      }\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n  return newTiles;\n};\n\nconst slideRight = (newTiles, row) => {\n  for (let col = dimension - 1; col > 0; col--) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col - 1;\n      while (col2 > 0 && newTiles[row][col2] === 0) {\n        col2 -= 1;\n      }\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n  return newTiles;\n};\n\nconst slideWholeBoard = (newTiles, direction) => {\n  for (let col = 0; col < dimension; col++) {\n    switch (direction) {\n      case DIRECTION.UP:\n        slideUp(newTiles, col);\n        break;\n      case DIRECTION.DOWN:\n        slideDown(newTiles, col);\n        break;\n      case DIRECTION.LEFT:\n        slideLeft(newTiles, col);\n        break;\n      case DIRECTION.RIGHT:\n        slideRight(newTiles, col);\n        break;\n      default:\n        console.log(\"not a direction\");\n      //do nothing\n    }\n  }\n};\n\n// modify board with merged tiles newTiles up one\nconst shiftUp = newTiles => {\n  for (let row = 0; row < dimension - 1; row++) {\n    for (let col = 0; col < dimension; col++) {\n      let nextRow = row + 1;\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftLeft = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = 0; col < dimension - 1; col++) {\n      let nextCol = col + 1;\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst shiftDown = newTiles => {\n  for (let row = dimension - 1; row > 0; row--) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextRow = row - 1;\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftRight = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextCol = col - 1;\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst fullMerge = (newTiles, direction) => {\n  switch (direction) {\n    case DIRECTION.UP:\n      shiftUp(newTiles);\n      break;\n    case DIRECTION.DOWN:\n      shiftDown(newTiles);\n      break;\n    case DIRECTION.LEFT:\n      shiftLeft(newTiles);\n      break;\n    case DIRECTION.RIGHT:\n      shiftRight(newTiles);\n      break;\n    default:\n      console.log(\"not a direction\");\n    //do nothing\n  }\n};\n\n// return random row or col index\nconst getRandomIndex = () => {\n  return Math.floor(Math.random() * dimension);\n};\n\n// TO DO: detect if no empty tiles left or it will infinitely loop\n// generates new num in random spot and updates board\nconst generateNewNum = newTiles => {\n  let row = getRandomIndex();\n  let col = getRandomIndex();\n  if (newTiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    generateNewNum(newTiles);\n  }\n};\n\n// keep for testing\n// happens in one board update when key pressed\nconst fullShift = (newTiles, direction) => {\n  slideWholeBoard(newTiles, direction);\n  fullMerge(newTiles, direction);\n  slideWholeBoard(newTiles, direction);\n  return newTiles;\n};\n\nconst updateTiles = (tiles, direction) => {\n  var newTiles = [...tiles];\n  fullShift(newTiles, direction);\n  generateNewNum(newTiles);\n  return newTiles;\n};\n\nexport {\n  merge,\n  slideUp,\n  slideDown,\n  slideWholeBoard,\n  fullMerge,\n  fullShift,\n  updateTiles,\n  gameOver\n};\n"]},"metadata":{},"sourceType":"module"}