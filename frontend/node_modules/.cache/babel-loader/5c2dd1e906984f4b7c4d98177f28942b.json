{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/frontend/src/components/Board.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { dimension, DIRECTION, winningTile } from \"../constants.js\";\nimport Tile from \"./Tile.js\";\nimport Stopwatch from \"./Stopwatch.js\";\n\nconst Board = props => {\n  Board.propTypes = {\n    keyPressed: DIRECTION.isRequired\n  };\n  Board.defaultProps = {\n    keyPressed: DIRECTION.UP\n  };\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  const _useState = useState(initialTiles),\n        _useState2 = _slicedToArray(_useState, 2),\n        tiles = _useState2[0],\n        setTiles = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1];\n\n  const pressed = props.keyPressed;\n\n  const _useState5 = useState(\"00:00:00\"),\n        _useState6 = _slicedToArray(_useState5, 2),\n        time = _useState6[0],\n        setTime = _useState6[1];\n\n  var endTime = null;\n\n  const renderTile = (i, j) => {\n    return React.createElement(Tile, {\n      value: tiles[i][j],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    });\n  };\n\n  const renderStatus = () => {\n    if (gameOver) {\n      endTime = time;\n      return React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, \" You won! Your time is \", endTime, \" \"); //return <GameEndStatus/>;\n    }\n\n    return React.createElement(Stopwatch, {\n      setGameTime: stopwatchTime => {\n        setTime(stopwatchTime);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    });\n  };\n\n  const renderRow = i => {\n    return React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, renderTile(i, 0), renderTile(i, 1), renderTile(i, 2), renderTile(i, 3));\n  };\n\n  const renderDisplay = () => {\n    if (gameOver) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }, \"Whoo!\"));\n    } //if (gameOver) {\n    //return (\n    //<div>\n    //<GameOverDisplay />\n    //<p>End time: {time}</p>\n    //</div>\n    //);\n    //}\n\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, renderRow(0), renderRow(1), renderRow(2), renderRow(3));\n  };\n\n  const updateBoard = () => {\n    var direction = pressed.direction;\n\n    if (direction != null) {\n      // if valid key pressed\n      var newTiles = updateTiles(tiles, direction);\n      setTiles(newTiles);\n      setGameOver(isGameOver(tiles));\n    }\n  };\n\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, renderStatus(), renderDisplay());\n}; //is there a better way of doing this\n\n\nconst isGameOver = newTiles => {\n  for (let i = 0; i < dimension; i++) {\n    for (let j = 0; j < dimension; j++) {\n      if (newTiles[i][j] === winningTile) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}; // side effect: modify newTiles\n\n\nconst merge = (newTiles, row1, col1, row2, col2) => {\n  let currentVal = newTiles[row1][col1];\n  let adjacentVal = newTiles[row2][col2];\n  newTiles[row1][col1] = currentVal + adjacentVal;\n  newTiles[row2][col2] = 0;\n}; // do \"sliding all the way\" when shift\n\n\nconst slideUp = (newTiles, col) => {\n  //slide incrementally\n  for (let row = 0; row < dimension - 1; row++) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row + 1; //slide next available non blank tile\n\n      while (row2 < dimension - 1 && newTiles[row2][col] === 0) {\n        row2 += 1;\n      }\n\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideLeft = (newTiles, row) => {\n  for (let col = 0; col < dimension - 1; col++) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col + 1;\n\n      while (col2 < dimension - 1 && newTiles[row][col2] === 0) {\n        col2 += 1;\n      }\n\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideDown = (newTiles, col) => {\n  for (let row = dimension - 1; row > 0; row--) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row - 1;\n\n      while (row2 > 0 && newTiles[row2][col] === 0) {\n        row2 -= 1;\n      }\n\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideRight = (newTiles, row) => {\n  for (let col = dimension - 1; col > 0; col--) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col - 1;\n\n      while (col2 > 0 && newTiles[row][col2] === 0) {\n        col2 -= 1;\n      }\n\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideWholeBoard = (newTiles, direction) => {\n  for (let col = 0; col < dimension; col++) {\n    switch (direction) {\n      case DIRECTION.UP:\n        slideUp(newTiles, col);\n        break;\n\n      case DIRECTION.DOWN:\n        slideDown(newTiles, col);\n        break;\n\n      case DIRECTION.LEFT:\n        slideLeft(newTiles, col);\n        break;\n\n      case DIRECTION.RIGHT:\n        slideRight(newTiles, col);\n        break;\n\n      default:\n        console.log(\"not a direction\");\n      //do nothing\n    }\n  }\n}; // modify board with merged tiles newTiles up one\n\n\nconst shiftUp = newTiles => {\n  for (let row = 0; row < dimension - 1; row++) {\n    for (let col = 0; col < dimension; col++) {\n      let nextRow = row + 1;\n\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftLeft = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = 0; col < dimension - 1; col++) {\n      let nextCol = col + 1;\n\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst shiftDown = newTiles => {\n  for (let row = dimension - 1; row > 0; row--) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextRow = row - 1;\n\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftRight = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextCol = col - 1;\n\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst fullMerge = (newTiles, direction) => {\n  switch (direction) {\n    case DIRECTION.UP:\n      shiftUp(newTiles);\n      break;\n\n    case DIRECTION.DOWN:\n      shiftDown(newTiles);\n      break;\n\n    case DIRECTION.LEFT:\n      shiftLeft(newTiles);\n      break;\n\n    case DIRECTION.RIGHT:\n      shiftRight(newTiles);\n      break;\n\n    default:\n      console.log(\"not a direction\");\n    //do nothing\n  }\n}; // return random row or col index\n\n\nconst getRandomIndex = () => {\n  return Math.floor(Math.random() * dimension);\n}; // TO DO: detect if no empty tiles left or it will infinitely loop\n// generates new num in random spot and updates board\n\n\nconst generateNewNum = newTiles => {\n  let row = getRandomIndex();\n  let col = getRandomIndex();\n\n  if (newTiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    generateNewNum(newTiles);\n  }\n}; // keep for testing\n// happens in one board update when key pressed\n\n\nconst fullShift = (newTiles, direction) => {\n  slideWholeBoard(newTiles, direction);\n  fullMerge(newTiles, direction);\n  slideWholeBoard(newTiles, direction);\n  return newTiles;\n};\n\nconst updateTiles = (tiles, direction) => {\n  var newTiles = [...tiles];\n  fullShift(newTiles, direction);\n  generateNewNum(newTiles);\n  return newTiles;\n};\n\nexport { Board, merge, slideUp, slideDown, slideWholeBoard, fullMerge, fullShift, updateTiles };","map":{"version":3,"sources":["/home/lregina/onboarding/2048/frontend/src/components/Board.js"],"names":["React","useState","useEffect","dimension","DIRECTION","winningTile","Tile","Stopwatch","Board","props","propTypes","keyPressed","isRequired","defaultProps","UP","initialTiles","tiles","setTiles","gameOver","setGameOver","pressed","time","setTime","endTime","renderTile","i","j","renderStatus","stopwatchTime","renderRow","renderDisplay","updateBoard","direction","newTiles","updateTiles","isGameOver","merge","row1","col1","row2","col2","currentVal","adjacentVal","slideUp","col","row","slideLeft","slideDown","slideRight","slideWholeBoard","DOWN","LEFT","RIGHT","console","log","shiftUp","nextRow","shiftLeft","nextCol","shiftDown","shiftRight","fullMerge","getRandomIndex","Math","floor","random","generateNewNum","fullShift"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { dimension, DIRECTION, winningTile } from \"../constants.js\";\nimport Tile from \"./Tile.js\";\nimport Stopwatch from \"./Stopwatch.js\";\n\nconst Board = props => {\n\tBoard.propTypes = {\n\t\tkeyPressed: DIRECTION.isRequired,\n\t}\n\t\n\tBoard.defaultProps = {\n\t\tkeyPressed: DIRECTION.UP,\n\t}\n\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  const [tiles, setTiles] = useState(initialTiles);\n  const [gameOver, setGameOver] = useState(false);\n  const pressed = props.keyPressed;\n  const [time, setTime] = useState(\"00:00:00\");\n  var endTime = null;\n\n  const renderTile = (i, j) => {\n    return <Tile value={tiles[i][j]} />;\n  };\n  const renderStatus = () => {\n    if (gameOver) {\n      endTime = time;\n      return <p> You won! Your time is {endTime} </p>;\n      //return <GameEndStatus/>;\n    }\n    return (\n      <Stopwatch\n        setGameTime={stopwatchTime => {\n          setTime(stopwatchTime);\n        }}\n      />\n    );\n  };\n  const renderRow = i => {\n    return (\n      <div className=\"board-row\">\n        {renderTile(i, 0)}\n        {renderTile(i, 1)}\n        {renderTile(i, 2)}\n        {renderTile(i, 3)}\n      </div>\n    );\n  };\n  const renderDisplay = () => {\n    if (gameOver) {\n      return (\n        <div>\n\t\t\t\t\t<p>Whoo!</p>\n        </div>\n      );\n    }\n    //if (gameOver) {\n    //return (\n    //<div>\n    //<GameOverDisplay />\n    //<p>End time: {time}</p>\n    //</div>\n    //);\n    //}\n    return (\n      <div>\n        {renderRow(0)}\n        {renderRow(1)}\n        {renderRow(2)}\n        {renderRow(3)}\n      </div>\n    );\n  };\n  const updateBoard = () => {\n    var direction = pressed.direction;\n    if (direction != null) {\n      // if valid key pressed\n      var newTiles = updateTiles(tiles, direction);\n      setTiles(newTiles);\n      setGameOver(isGameOver(tiles));\n    }\n  };\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n\n  return (\n    <div>\n      {renderStatus()}\n      {renderDisplay()}\n    </div>\n  );\n};\n\n//is there a better way of doing this\nconst isGameOver = newTiles => {\n  for (let i = 0; i < dimension; i++) {\n    for (let j = 0; j < dimension; j++) {\n      if (newTiles[i][j] === winningTile) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// side effect: modify newTiles\nconst merge = (newTiles, row1, col1, row2, col2) => {\n  let currentVal = newTiles[row1][col1];\n  let adjacentVal = newTiles[row2][col2];\n  newTiles[row1][col1] = currentVal + adjacentVal;\n  newTiles[row2][col2] = 0;\n};\n\n// do \"sliding all the way\" when shift\nconst slideUp = (newTiles, col) => {\n  //slide incrementally\n  for (let row = 0; row < dimension - 1; row++) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row + 1;\n      //slide next available non blank tile\n      while (row2 < dimension - 1 && newTiles[row2][col] === 0) {\n        row2 += 1;\n      }\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n  return newTiles;\n};\n\nconst slideLeft = (newTiles, row) => {\n  for (let col = 0; col < dimension - 1; col++) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col + 1;\n      while (col2 < dimension - 1 && newTiles[row][col2] === 0) {\n        col2 += 1;\n      }\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n  return newTiles;\n};\n\nconst slideDown = (newTiles, col) => {\n  for (let row = dimension - 1; row > 0; row--) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row - 1;\n      while (row2 > 0 && newTiles[row2][col] === 0) {\n        row2 -= 1;\n      }\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n  return newTiles;\n};\n\nconst slideRight = (newTiles, row) => {\n  for (let col = dimension - 1; col > 0; col--) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col - 1;\n      while (col2 > 0 && newTiles[row][col2] === 0) {\n        col2 -= 1;\n      }\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n  return newTiles;\n};\n\nconst slideWholeBoard = (newTiles, direction) => {\n  for (let col = 0; col < dimension; col++) {\n    switch (direction) {\n      case DIRECTION.UP:\n        slideUp(newTiles, col);\n        break;\n      case DIRECTION.DOWN:\n        slideDown(newTiles, col);\n        break;\n      case DIRECTION.LEFT:\n        slideLeft(newTiles, col);\n        break;\n      case DIRECTION.RIGHT:\n        slideRight(newTiles, col);\n        break;\n      default:\n        console.log(\"not a direction\");\n      //do nothing\n    }\n  }\n};\n\n// modify board with merged tiles newTiles up one\nconst shiftUp = newTiles => {\n  for (let row = 0; row < dimension - 1; row++) {\n    for (let col = 0; col < dimension; col++) {\n      let nextRow = row + 1;\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftLeft = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = 0; col < dimension - 1; col++) {\n      let nextCol = col + 1;\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst shiftDown = newTiles => {\n  for (let row = dimension - 1; row > 0; row--) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextRow = row - 1;\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftRight = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextCol = col - 1;\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst fullMerge = (newTiles, direction) => {\n  switch (direction) {\n    case DIRECTION.UP:\n      shiftUp(newTiles);\n      break;\n    case DIRECTION.DOWN:\n      shiftDown(newTiles);\n      break;\n    case DIRECTION.LEFT:\n      shiftLeft(newTiles);\n      break;\n    case DIRECTION.RIGHT:\n      shiftRight(newTiles);\n      break;\n    default:\n      console.log(\"not a direction\");\n    //do nothing\n  }\n};\n\n// return random row or col index\nconst getRandomIndex = () => {\n  return Math.floor(Math.random() * dimension);\n};\n\n// TO DO: detect if no empty tiles left or it will infinitely loop\n// generates new num in random spot and updates board\nconst generateNewNum = newTiles => {\n  let row = getRandomIndex();\n  let col = getRandomIndex();\n  if (newTiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    generateNewNum(newTiles);\n  }\n};\n\n// keep for testing\n// happens in one board update when key pressed\nconst fullShift = (newTiles, direction) => {\n  slideWholeBoard(newTiles, direction);\n  fullMerge(newTiles, direction);\n  slideWholeBoard(newTiles, direction);\n  return newTiles;\n};\n\nconst updateTiles = (tiles, direction) => {\n  var newTiles = [...tiles];\n  fullShift(newTiles, direction);\n  generateNewNum(newTiles);\n  return newTiles;\n};\n\nexport {\n  Board,\n  merge,\n  slideUp,\n  slideDown,\n  slideWholeBoard,\n  fullMerge,\n  fullShift,\n  updateTiles\n};\n"]},"metadata":{},"sourceType":"module"}