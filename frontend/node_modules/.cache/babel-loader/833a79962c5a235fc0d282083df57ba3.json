{"ast":null,"code":"import { dimension, DIRECTION } from \"./constants.js\"; // side effect: modify shifted\n\nexport function merge(shifted, row1, col1, row2, col2) {\n  let currentVal = shifted[row1][col1];\n  let adjacentVal = shifted[row2][col2];\n  shifted[row1][col1] = currentVal + adjacentVal;\n  shifted[row2][col2] = 0;\n} // do \"sliding all the way\" when shift\n\nexport function slideUp(shifted, col) {\n  for (let row = 0; row < dimension - 1; row++) {\n    if (shifted[row][col] == 0) {\n      let row2 = row + 1;\n\n      while (row2 < dimension - 1 && shifted[row2][col] === 0) {\n        row2 += 1;\n      }\n\n      merge(shifted, row, col, row2, col);\n    }\n  }\n\n  return shifted;\n}\n\nfunction slideLeft(shifted, row) {\n  for (let col = 0; col < dimension - 1; col++) {\n    if (shifted[row][col] == 0) {\n      let col2 = col + 1;\n\n      while (col2 < dimension - 1 && shifted[row][col2] === 0) {\n        col2 += 1;\n      }\n\n      merge(shifted, row, col, row, col2);\n    }\n  }\n\n  return shifted;\n}\n\nfunction slideDown(shifted, col) {\n  for (let row = dimension - 1; row > 0; row--) {\n    if (shifted[row][col] == 0) {\n      let row2 = row - 1;\n\n      while (row2 > 0 && shifted[row2][col] === 0) {\n        row2 -= 1;\n      }\n\n      merge(shifted, row, col, row2, col);\n    }\n  }\n\n  return shifted;\n}\n\nfunction slideRight(shifted, row) {\n  for (let col = dimension - 1; col > 0; col--) {\n    if (shifted[row][col] == 0) {\n      let col2 = col - 1;\n\n      while (col2 > 0 && shifted[row][col2] === 0) {\n        col2 -= 1;\n      }\n\n      merge(shifted, row, col, row, col2);\n    }\n  }\n\n  return shifted;\n}\n\nexport function slideWholeBoard(shifted, direction) {\n  for (let col = 0; col < dimension; col++) {\n    switch (direction) {\n      case DIRECTION.UP:\n        slideUp(shifted, col);\n        break;\n\n      case DIRECTION.DOWN:\n        slideDown(shifted, col);\n        break;\n\n      case DIRECTION.LEFT:\n        slideLeft(shifted, col);\n        break;\n\n      case DIRECTION.RIGHT:\n        slideRight(shifted, col);\n        break;\n\n      default:\n        console.log('not a direction');\n      //do nothing\n    }\n  }\n} // modify board with merged tiles shifted up one\n\nfunction shiftUp(shifted) {\n  for (let row = 0; row < dimension - 1; row++) {\n    for (let col = 0; col < dimension; col++) {\n      let nextRow = row + 1;\n\n      if (shifted[row][col] === shifted[nextRow][col]) {\n        merge(shifted, row, col, nextRow, col);\n      }\n    }\n  }\n}\n\nfunction shiftLeft(shifted) {\n  for (let col = 0; col < dimension - 1; col++) {\n    for (let row = 0; row < dimension; row++) {\n      let nextCol = col + 1;\n\n      if (shifted[row][col] === shifted[row][nextCol]) {\n        merge(shifted, row, col, row, nextCol);\n      }\n    }\n  }\n}\n\nfunction shiftDown(shifted) {\n  for (let row = dimension - 1; row > 0; row--) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextRow = row - 1;\n\n      if (shifted[row][col] === shifted[nextRow][col]) {\n        merge(shifted, row, col, nextRow, col);\n      }\n    }\n  }\n}\n\nfunction shiftRight(shifted) {\n  for (let col = dimension - 1; col > 0; col--) {\n    for (let row = dimension - 1; row > 0; row--) {\n      let nextCol = col - 1;\n\n      if (shifted[row][col] === shifted[row][nextCol]) {\n        merge(shifted, row, col, row, nextCol);\n      }\n    }\n  }\n}\n\nexport function fullMerge(shifted, direction) {\n  switch (direction) {\n    case DIRECTION.UP:\n      shiftUp(shifted);\n      break;\n\n    case DIRECTION.DOWN:\n      shiftDown(shifted);\n      break;\n\n    case DIRECTION.LEFT:\n      shiftLeft(shifted);\n      break;\n\n    case DIRECTION.RIGHT:\n      shiftRight(shifted);\n      break;\n\n    default:\n      console.log('not a direction');\n    //do nothing\n  }\n} // happens in one board update when key pressed\n\nexport function fullShift(tiles, direction) {\n  var shifted = [...tiles];\n  slideWholeBoard(shifted, direction);\n  fullMerge(shifted, direction);\n}\nexport default {\n  merge,\n  slideUp,\n  slideDown,\n  slideWholeBoard,\n  fullMerge,\n  fullShift\n};","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/board.js"],"names":["dimension","DIRECTION","merge","shifted","row1","col1","row2","col2","currentVal","adjacentVal","slideUp","col","row","slideLeft","slideDown","slideRight","slideWholeBoard","direction","UP","DOWN","LEFT","RIGHT","console","log","shiftUp","nextRow","shiftLeft","nextCol","shiftDown","shiftRight","fullMerge","fullShift","tiles"],"mappings":"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","sourcesContent":["import { dimension, DIRECTION} from \"./constants.js\"; \n\n// side effect: modify shifted\nexport function merge(shifted, row1, col1, row2, col2) {\n\tlet currentVal = shifted[row1][col1];\n\tlet adjacentVal = shifted[row2][col2];\n\tshifted[row1][col1] = currentVal + adjacentVal; \n\tshifted[row2][col2] = 0;\n}\n\n// do \"sliding all the way\" when shift\nexport function slideUp(shifted, col){\n\tfor (let row = 0; row < dimension - 1; row++) {\n\t\tif (shifted[row][col] == 0) {\n\t\t\tlet row2 = row + 1;\n\t\t\twhile (row2 < dimension - 1 && shifted[row2][col] === 0) {\n\t\t\t\trow2 += 1;\n\t\t\t}\n\t\t\tmerge(shifted, row, col, row2, col);\n\t\t}\t\n\t}\n\treturn shifted;\n}\n\nfunction slideLeft(shifted, row) {\n\tfor (let col = 0; col < dimension - 1; col ++) {\n\t\tif (shifted[row][col] == 0) {\n\t\t\tlet col2 = col + 1;\n\t\t\twhile (col2 < dimension - 1 && shifted[row][col2] === 0) {\n\t\t\t\tcol2 += 1;\n\t\t\t}\n\t\t\tmerge(shifted, row, col, row, col2);\n\t\t}\t\n\t}\n\treturn shifted;\n}\n\nfunction slideDown(shifted, col){\n\tfor (let row = dimension - 1; row > 0; row--) {\n\t\tif (shifted[row][col] == 0) {\n\t\t\tlet row2 = row - 1;\n\t\t\twhile (row2 > 0 && shifted[row2][col] === 0) {\n\t\t\t\trow2 -= 1;\n\t\t\t}\n\t\t\tmerge(shifted, row, col, row2, col);\n\t\t}\t\n\t}\n\treturn shifted;\n}\n\nfunction slideRight(shifted, row){\n\tfor (let col = dimension - 1; col > 0; col--) {\n\t\tif (shifted[row][col] == 0) {\n\t\t\tlet col2 = col - 1;\n\t\t\twhile (col2 > 0 && shifted[row][col2] === 0) {\n\t\t\t\tcol2 -= 1;\n\t\t\t}\n\t\t\tmerge(shifted, row, col, row, col2);\n\t\t}\t\n\t}\n\treturn shifted;\n}\n\nexport function slideWholeBoard(shifted, direction) {\n\tfor (let col = 0; col < dimension; col++) {\n\t\tswitch(direction) {\n\t\t\tcase DIRECTION.UP:\n\t\t\t\tslideUp(shifted, col);\t\t\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.DOWN:\n\t\t\t\tslideDown(shifted, col);\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.LEFT:\n\t\t\t\tslideLeft(shifted, col);\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.RIGHT:\n\t\t\t\tslideRight(shifted, col);\n\t\t\t\tbreak;\n\t\t\tdefault: \n\t\t\t\tconsole.log('not a direction');\n\t\t\t\t//do nothing\n\t\t}\n\t}\n}\n\n// modify board with merged tiles shifted up one\nfunction shiftUp(shifted) {\n\tfor (let row = 0; row < dimension - 1; row++) {\n\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\tlet nextRow = row + 1;\n\t\t\tif (shifted[row][col] === shifted[nextRow][col]) {\n\t\t\t\tmerge(shifted, row, col, nextRow, col)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction shiftLeft(shifted) {\n\tfor (let col = 0; col < dimension - 1; col++) {\n\t\tfor (let row = 0; row < dimension; row++) {\n\t\t\tlet nextCol = col + 1;\n\t\t\tif (shifted[row][col] === shifted[row][nextCol]) {\n\t\t\t\tmerge(shifted, row, col, row, nextCol)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction shiftDown(shifted) {\n\tfor (let row = dimension - 1; row > 0; row--) {\n\t\tfor (let col = dimension - 1; col > 0; col--) {\n\t\t\tlet nextRow = row - 1;\n\t\t\tif (shifted[row][col] === shifted[nextRow][col]) {\n\t\t\t\tmerge(shifted, row, col, nextRow, col)\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction shiftRight(shifted) {\n\tfor (let col = dimension - 1; col > 0; col--) {\n\t\tfor (let row = dimension - 1; row > 0; row--) {\n\t\t\tlet nextCol = col - 1;\n\t\t\tif (shifted[row][col] === shifted[row][nextCol]) {\n\t\t\t\tmerge(shifted, row, col, row, nextCol)\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function fullMerge(shifted, direction) {\n\tswitch(direction) {\n\t\tcase DIRECTION.UP:\n\t\t\tshiftUp(shifted);\n\t\t\tbreak;\n\t\tcase DIRECTION.DOWN:\n\t\t\tshiftDown(shifted);\n\t\t\tbreak;\n\t\tcase DIRECTION.LEFT:\n\t\t\tshiftLeft(shifted);\n\t\t\tbreak;\n\t\tcase DIRECTION.RIGHT:\n\t\t\tshiftRight(shifted);\n\t\t\tbreak;\n\t\tdefault: \n\t\t\tconsole.log('not a direction');\n\t\t\t//do nothing\n\t}\n}\n\n// happens in one board update when key pressed\nexport function fullShift(tiles, direction) {\n\tvar shifted = [...tiles];\n\tslideWholeBoard(shifted, direction);\n\tfullMerge(shifted, direction);\n}\n\nexport default { \n\tmerge, \n\tslideUp, \n\tslideDown, \n\tslideWholeBoard, \n\tfullMerge,\n\tfullShift \n};\n"]},"metadata":{},"sourceType":"module"}