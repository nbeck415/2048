{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension, DIRECTION } from \"./constants.js\";\nimport { updateTiles } from \"./board.js\"; // return True if game over\n\nfunction gameOver() {\n  return false;\n}\n\nfunction Tile(props) {\n  return React.createElement(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, props.value);\n}\n\nfunction Board() {\n  let status = true; // later: replace status with timer\n\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  var _useState = useState(initialTiles),\n      _useState2 = _slicedToArray(_useState, 2),\n      tiles = _useState2[0],\n      setTiles = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameOver = _useState4[0],\n        setGameOver = _useState4[1];\n\n  const pressed = useKeyPress();\n\n  function renderTile(i, j) {\n    return React.createElement(Tile, {\n      value: tiles[i][j],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    });\n  }\n\n  function renderRow(i) {\n    return React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, renderTile(i, 0), renderTile(i, 1), renderTile(i, 2), renderTile(i, 3));\n  }\n\n  function updateBoard() {\n    var direction = 'up';\n\n    switch (pressed) {\n      case 'up':\n        direction = DIRECTION.UP;\n        break;\n\n      case 'down':\n        direction = DIRECTION.DOWN;\n        break;\n\n      case 'left':\n        direction = DIRECTION.LEFT;\n        break;\n\n      case 'right':\n        direction = DIRECTION.RIGHT;\n        break;\n\n      default:\n        //idk\n        break;\n    } //pressed is the direction\n\n\n    var newTiles = updateTiles(tiles, direction);\n    setTiles(newTiles);\n    console.log(newTiles);\n  }\n\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"status\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, status), renderRow(0), renderRow(1), renderRow(2), renderRow(3));\n} // key press handler using vim keys\n\n\nfunction useKeyPress() {\n  const _useState5 = useState(null),\n        _useState6 = _slicedToArray(_useState5, 2),\n        keyPressed = _useState6[0],\n        setKeyPressed = _useState6[1];\n\n  function downHandler({\n    key\n  }) {\n    let pressed = \"\";\n\n    switch (key) {\n      case \"k\":\n        pressed = \"up\";\n        break;\n\n      case \"j\":\n        pressed = \"down\";\n        break;\n\n      case \"h\":\n        pressed = \"left\";\n        break;\n\n      case \"l\":\n        pressed = \"right\";\n        break;\n\n      default:\n        pressed = null;\n        break;\n    }\n\n    setKeyPressed(pressed);\n    console.log(\"pressed \".concat(pressed));\n  }\n\n  function upHandler({\n    key\n  }) {\n    if (key === pressed) {\n      setKeyPressed(\"\");\n      setKeyPressed(key);\n    }\n\n    console.log('lifted key');\n  } // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler); //window.addEventListener(\"keyup\", upHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler); //window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nfunction Game() {\n  //const initialTiles = [\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //];\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"game-board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  })));\n} //function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 167\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","createContext","useState","useEffect","ReactDOM","dimension","DIRECTION","updateTiles","gameOver","Tile","props","onClick","value","Board","status","initialTiles","tiles","setTiles","setGameOver","pressed","useKeyPress","renderTile","i","j","renderRow","updateBoard","direction","UP","DOWN","LEFT","RIGHT","newTiles","console","log","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","Game","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { dimension, DIRECTION } from \"./constants.js\";\nimport { updateTiles } from \"./board.js\";\n\n// return True if game over\nfunction gameOver() {\n  return false;\n}\n\nfunction Tile(props) {\n  return (\n    <button className=\"tile\" onClick={props.onClick}>\n      {props.value}\n    </button>\n  );\n}\n\nfunction Board() {\n  let status = true; // later: replace status with timer\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  var [tiles, setTiles] = useState(initialTiles);\n  const [gameOver, setGameOver] = useState(false);\n  const pressed = useKeyPress();\n\n  function renderTile(i, j) {\n    return <Tile value={tiles[i][j]}/>;\n  }\n  function renderRow(i) {\n    return (\n      <div className=\"board-row\">\n        {renderTile(i, 0)}\n        {renderTile(i, 1)}\n        {renderTile(i, 2)}\n        {renderTile(i, 3)}\n      </div>\n    );\n  }\n  function updateBoard() {\n\t\tvar direction = 'up';\n\t\tswitch(pressed) {\n\t\t\tcase 'up':\n\t\t\t\tdirection = DIRECTION.UP;\n\t\t\t\tbreak;\n\t\t\tcase 'down':\n\t\t\t\tdirection = DIRECTION.DOWN;\n\t\t\t\tbreak;\n\t\t\tcase 'left':\n\t\t\t\tdirection = DIRECTION.LEFT;\n\t\t\t\tbreak;\n\t\t\tcase 'right':\n\t\t\t\tdirection = DIRECTION.RIGHT;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t//idk\n\t\t\t\tbreak;\n\t\t} \n\t\t//pressed is the direction\n\t\tvar newTiles = updateTiles(tiles, direction);\n\t\tsetTiles(newTiles);\t\n    console.log(newTiles);\n  }\n  useEffect(() => {\n\t\tupdateBoard();\n  }, [pressed]);\n\n  return (\n    <div>\n      <div className=\"status\">{status}</div>\n      {renderRow(0)}\n      {renderRow(1)}\n      {renderRow(2)}\n      {renderRow(3)}\n    </div>\n  );\n}\n\n// key press handler using vim keys\nfunction useKeyPress() {\n  const [keyPressed, setKeyPressed] = useState(null);\n\n  function downHandler({ key }) {\n    let pressed = \"\";\n    switch (key) {\n      case \"k\":\n        pressed = \"up\";\n        break;\n      case \"j\":\n        pressed = \"down\";\n        break;\n      case \"h\":\n        pressed = \"left\";\n        break;\n      case \"l\":\n        pressed = \"right\";\n        break;\n      default:\n        pressed = null;\n        break;\n    }\n    setKeyPressed(pressed);\n    console.log(`pressed ${pressed}`);\n  }\n\n\tfunction upHandler({ key }) {\n\t\tif (key === pressed) {\n\t\t\tsetKeyPressed(\"\");\n\t\t\tsetKeyPressed(key);\n\t\t}\n\t\tconsole.log('lifted key');\n\t}\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    //window.addEventListener(\"keyup\", upHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n\t\t\t//window.removeEventListener(\"keyup\", upHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n}\n\nfunction Game() {\n  //const initialTiles = [\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //[0, 0, 0, 2],\n  //];\n\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n    </div>\n  );\n}\n\n//function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}