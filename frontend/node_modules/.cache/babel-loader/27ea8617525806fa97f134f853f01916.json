{"ast":null,"code":"import _slicedToArray from \"/home/lregina/2048/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/2048/frontend/src/index.js\";\nimport React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DIRECTION, initialTime, initialTiles } from './constants.js';\nimport { Board } from './components/board.js';\nimport Stopwatch from './components/stopwatch.js';\nimport { ScoreForm } from './components/displayComponents.js';\nimport { GameLogic } from './gameLogic.js';\nimport { ThemeProvider, useThemeState, useThemeDispatch } from './themes.js';\nimport * as serviceWorker from './serviceWorker';\nimport './style.css';\nexport const GameContext = React.createContext();\nexport const TimeContext = React.createContext();\nexport const BoardContext = React.createContext();\n\nconst Game = () => {\n  // GameContext\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        gameOver = _useState2[0],\n        setGameOver = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameWon = _useState4[0],\n        setGameWon = _useState4[1];\n\n  const pressed = useKeyPress(); // TimeContext\n\n  const _useState5 = useState(initialTime),\n        _useState6 = _slicedToArray(_useState5, 2),\n        gameTime = _useState6[0],\n        setGameTime = _useState6[1]; //BoardContext\n\n\n  const _useState7 = useState(initialTiles),\n        _useState8 = _slicedToArray(_useState7, 2),\n        tiles = _useState8[0],\n        setTiles = _useState8[1];\n\n  var endTime = null;\n  var topScores = window.token;\n\n  const displayScores = () => {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, topScores.map(score => React.createElement(\"div\", {\n      key: score.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40\n      },\n      __self: this\n    }, score.name, \": \", score.scoreValue, \" \"))));\n  }; //const gameDisplay = () => {\n  //return (\n  //<GameContext.Provider value={{ gameOver, setGameOver, pressed}}>\n  //<BoardContext.Provider value = {{ tiles, setTiles }}>\n  //<GameLogic />\n  //<Board />\n  //</BoardContext.Provider>\n  //</GameContext.Provider>\n  //)\n  //}\n\n\n  const renderStatus = () => {\n    if (gameOver && gameWon) {\n      endTime = gameTime;\n      return React.createElement(React.Fragment, null, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, \"You won!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, \"Your time is \", endTime, \" \"), React.createElement(ScoreForm, {\n        className: \"scoreForm\",\n        score: endTime,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }));\n    } else if (gameOver && !gameWon) {\n      return React.createElement(React.Fragment, null, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"You lost!\"), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Try again? \"));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(TimeContext.Provider, {\n        value: {\n          setGameTime\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(Stopwatch, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      })));\n    }\n  }; //const ToggleThemeDisplay = () => {\n  //const {theme} = useThemeState();\n  //return <div>Current theme is {`${theme}`}</div>\n  //}\n\n\n  const ToggleLightDark = () => {\n    //const theme = useThemeState();\n    const theme = useThemeState().color;\n    const dispatch = useThemeDispatch();\n    return React.createElement(\"button\", {\n      onClick: () => dispatch(theme),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, theme === 'light' ? 'dark mode' : 'light mode');\n  };\n\n  const ToggleNormalUltra = () => {\n    //const theme = useThemeState();\n    const theme = useThemeState().fun;\n    const dispatch = useThemeDispatch();\n    return React.createElement(\"button\", {\n      onClick: () => dispatch(theme),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, theme === 'normal' ? 'ultra mode' : 'normal mode');\n  }; // Game \n\n\n  return React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"leftContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"header\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, \"2048\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"subheader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Merge the tiles to get to\"), React.createElement(\"b\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"subheader, highlight\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, \"2048\")))), React.createElement(\"div\", {\n    className: \"stopwatch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, renderStatus(), React.createElement(ThemeProvider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(ToggleLightDark, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }), React.createElement(ToggleNormalUltra, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"gameContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(GameContext.Provider, {\n    value: {\n      gameOver,\n      setGameOver,\n      gameWon,\n      setGameWon,\n      pressed\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(BoardContext.Provider, {\n    value: {\n      tiles,\n      setTiles\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(GameLogic, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(Board, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"footer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, \"Directions\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, \"h: left, k: up, j: down, l: right \"))), React.createElement(\"div\", {\n    className: \"rightContainer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    id: \"scoresHeader\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, \"High Scores\")), displayScores()));\n}; // key press handler using vim keys\n\n\nconst useKeyPress = () => {\n  const _useState9 = useState({\n    direction: null\n  }),\n        _useState10 = _slicedToArray(_useState9, 2),\n        keyPressed = _useState10[0],\n        setKeyPressed = _useState10[1];\n\n  const downHandler = ({\n    key\n  }) => {\n    let pressed = null;\n\n    switch (key) {\n      case 'k':\n        pressed = DIRECTION.UP;\n        break;\n\n      case 'j':\n        pressed = DIRECTION.DOWN;\n        break;\n\n      case 'h':\n        pressed = DIRECTION.LEFT;\n        break;\n\n      case 'l':\n        pressed = DIRECTION.RIGHT;\n        break;\n\n      default:\n        pressed = null;\n        break;\n    }\n\n    setKeyPressed({\n      direction: pressed\n    });\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, []);\n  return keyPressed;\n}; // ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 190\n  },\n  __self: this\n}), document.getElementById('root'));\nserviceWorker.unregister();","map":{"version":3,"sources":["/home/lregina/2048/frontend/src/index.js"],"names":["React","useState","useEffect","ReactDOM","DIRECTION","initialTime","initialTiles","Board","Stopwatch","ScoreForm","GameLogic","ThemeProvider","useThemeState","useThemeDispatch","serviceWorker","GameContext","createContext","TimeContext","BoardContext","Game","gameOver","setGameOver","gameWon","setGameWon","pressed","useKeyPress","gameTime","setGameTime","tiles","setTiles","endTime","topScores","window","token","displayScores","map","score","id","name","scoreValue","renderStatus","ToggleLightDark","theme","color","dispatch","ToggleNormalUltra","fun","direction","keyPressed","setKeyPressed","downHandler","key","UP","DOWN","LEFT","RIGHT","addEventListener","removeEventListener","render","document","getElementById","unregister"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { \n\tDIRECTION, \n\tinitialTime, \n\tinitialTiles, \n} from './constants.js';\nimport { Board } from './components/board.js';\nimport Stopwatch from './components/stopwatch.js';\nimport { ScoreForm } from './components/displayComponents.js';\nimport { GameLogic } from './gameLogic.js';\nimport { ThemeProvider, useThemeState, useThemeDispatch } from './themes.js';\nimport * as serviceWorker from './serviceWorker'; \nimport './style.css';\n\nexport const GameContext = React.createContext();\nexport const TimeContext = React.createContext();\nexport const BoardContext = React.createContext();\n\nconst Game = () => {\n\t// GameContext\n  const [gameOver, setGameOver] = useState(false); \n\tconst [gameWon, setGameWon] = useState(false);\n\tconst pressed = useKeyPress(); \n\n\t// TimeContext\n\tconst [gameTime, setGameTime] = useState(initialTime); \n\n\t//BoardContext\n\tconst [tiles, setTiles] = useState(initialTiles);\n\n  var endTime = null;\n\tvar topScores = window.token; \n\n\tconst displayScores = () => {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{topScores.map(score => \n\t\t\t\t\t<div key={score.id}>\n\t\t\t\t\t\t<p>{score.name}: {score.scoreValue} </p> \n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\t//const gameDisplay = () => {\n\t\t//return (\n\t\t\t//<GameContext.Provider value={{ gameOver, setGameOver, pressed}}>\n\t\t\t\t//<BoardContext.Provider value = {{ tiles, setTiles }}>\n\t\t\t\t\t//<GameLogic />\n\t\t\t\t\t//<Board />\n\t\t\t\t//</BoardContext.Provider>\n\t\t\t//</GameContext.Provider>\n\t\t//)\n\t//}\n\n\tconst renderStatus = () => {\n\t\tif (gameOver && gameWon) {\n\t\t\tendTime = gameTime;\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>You won!</p>\n\t\t\t\t\t<p>Your time is {endTime} </p>\n\t\t\t\t\t<ScoreForm className='scoreForm' score={endTime}/>\n\t\t\t\t</>\n\t\t\t);\n\t\t} else if (gameOver && !gameWon) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>You lost!</p>\n\t\t\t\t\t<p>Try again? </p>\n\t\t\t\t</>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<TimeContext.Provider value={{ setGameTime }}>\n\t\t\t\t\t\t<Stopwatch/>\n\t\t\t\t\t</TimeContext.Provider>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t};\n\n\t//const ToggleThemeDisplay = () => {\n\t\t//const {theme} = useThemeState();\n\t\t//return <div>Current theme is {`${theme}`}</div>\n\t//}\n\n\tconst ToggleLightDark = () => {\n\t\t//const theme = useThemeState();\n\t\tconst theme = useThemeState().color;\n\t\tconst dispatch = useThemeDispatch();\n\t\treturn (\n\t\t\t<button onClick={() => dispatch(theme)}>\n\t\t\t\t{ theme === 'light' ? 'dark mode' : 'light mode' }\t\n\t\t\t</button>\n\t\t);\n\t}\n\n\tconst ToggleNormalUltra = () => {\n\t\t//const theme = useThemeState();\n\t\tconst theme = useThemeState().fun;\n\t\tconst dispatch = useThemeDispatch();\n\t\treturn (\n\t\t\t<button onClick={() => dispatch(theme)}>\n\t\t\t\t{ theme === 'normal' ? 'ultra mode' : 'normal mode' }\t\n\t\t\t</button>\n\t\t);\n\t}\n\n\t// Game \n  return (\n\t\t\t<div className='container'>\n\t\t\t\t<div className='leftContainer'> \n\t\t\t\t\t<div className='header'>\n\t\t\t\t\t\t<h1>2048</h1>\n\t\t\t\t\t\t<div> \n\t\t\t\t\t\t\t<p className='subheader'>Merge the tiles to get to</p>\n\t\t\t\t\t\t\t<b><p className='subheader, highlight'>2048</p></b>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='stopwatch'>\n\t\t\t\t\t\t{renderStatus()}\n\t\t\t\t\t\t<ThemeProvider>\n\t\t\t\t\t\t\t<ToggleLightDark />\n\t\t\t\t\t\t\t<ToggleNormalUltra/>\n\t\t\t\t\t\t</ThemeProvider>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='gameContainer'>\n\t\t\t\t\t\t<GameContext.Provider value={{ gameOver, setGameOver, gameWon, \n\t\t\t\t\t\t\t\tsetGameWon, pressed}}>\n\t\t\t\t\t\t\t<BoardContext.Provider value = {{ tiles, setTiles }}>\n\t\t\t\t\t\t\t\t<GameLogic />\n\t\t\t\t\t\t\t\t<Board />\n\t\t\t\t\t\t\t</BoardContext.Provider>\n\t\t\t\t\t\t</GameContext.Provider>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='footer'>\n\t\t\t\t\t\t<h3>Directions</h3>\n\t\t\t\t\t\t<p>h: left, k: up, j: down, l: right </p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='rightContainer'>\n\t\t\t\t\t<div id='scoresHeader'><h2>High Scores</h2></div>\n\t\t\t\t\t{displayScores()}\n\t\t\t\t</div>\n\t\t\t</div>\n  );\n};\n\n// key press handler using vim keys\nconst useKeyPress = () => {\n  const [keyPressed, setKeyPressed] = useState({ direction: null });\n\n  const downHandler = ({ key }) => {\n    let pressed = null;\n    switch (key) {\n      case 'k':\n        pressed = DIRECTION.UP;\n        break;\n      case 'j':\n        pressed = DIRECTION.DOWN;\n        break;\n      case 'h':\n        pressed = DIRECTION.LEFT;\n        break;\n      case 'l':\n        pressed = DIRECTION.RIGHT;\n        break;\n      default:\n        pressed = null;\n        break;\n    }\n    setKeyPressed({ direction: pressed });\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, []);\n  return keyPressed;\n};\n\n// ========================================\nReactDOM.render(<Game />, document.getElementById('root'));\nserviceWorker.unregister()\n"]},"metadata":{},"sourceType":"module"}