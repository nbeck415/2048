{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { KeyHandler, KEYPRESS } from 'react-key-handler';\nimport { useState, useEffect } from 'react';\nimport './index.css';\nconst dimension = 4;\n\nfunction Tile(props) {\n  return React.createElement(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, props.value);\n} // return True if game over\n\n\nfunction gameOver() {\n  return false;\n} // generates new num in random spot and updates board\n\n\nfunction newNum(tiles) {\n  let newTiles = tiles.slice();\n  let row = Math.floor(Math.random() * dimension);\n  let col = Math.floor(Math.random() * dimension);\n\n  if (tiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    newNum(tiles);\n  }\n\n  return newTiles;\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tiles: this.createBoard(),\n      gameOver: false\n    };\n  }\n\n  createBoard() {\n    let tiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n    let newTiles = newNum(tiles);\n    return newTiles;\n  }\n\n  handleClick(i, j) {\n    console.log(\"clicked row {i} col {j}\");\n    const tiles = this.state.tiles.slice(); //ignore click if game has been won\n    //if (calculateWinner(tiles) || tiles[i]) {\n    //return;\n    //}\n    //tiles[i] = this.state.xIsNext ? 'X' : 'O';\n\n    this.setState({\n      tiles: tiles,\n      gameOver: gameOver //xIsNext: !this.state.xIsNext,\n\n    });\n  }\n\n  renderTile(i, j) {\n    return React.createElement(Tile, {\n      value: this.state.tiles[i][j],\n      onClick: () => this.handleClick(i, j),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    });\n  }\n\n  renderRow(i) {\n    return React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.renderTile(i, 0), this.renderTile(i, 1), this.renderTile(i, 2), this.renderTile(i, 3));\n  }\n\n  render() {\n    let status = true; // later: replace status with timer\n    //const winner = calculateWinner(this.state.tiles);\n    //let status;\n    //if (winner) {\n    //status = 'Winner: ' + winner;\n    //} else {\n    //status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    //}\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, status), this.renderRow(0), this.renderRow(1), this.renderRow(2), this.renderRow(3));\n  }\n\n}\n\nclass Game extends React.Component {\n  componentDidMount() {}\n\n  componentWillUnmount() {}\n\n  useKeyPress(targetKey) {\n    const _useState = useState(false),\n          _useState2 = _slicedToArray(_useState, 2),\n          keyPressed = _useState2[0],\n          setKeyPressed = _useState2[1];\n\n    function downHandler({\n      key\n    }) {\n      if (key === targetKey) {\n        setKeyPressed(true);\n      }\n    }\n\n    const upHandler = ({\n      key\n    }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n      }\n    }; // event listeners\n\n\n    useEffect(() => {\n      window.addEventListener('keydown', downHandler);\n      window.addEventListener('keyup', upHandler); // Remove event listeners on cleanup\n\n      return () => {\n        window.removeEventListener('keydown', downHandler);\n        window.removeEventListener('keyup', upHandler);\n      };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n\n    return keyPressed;\n  }\n\n  move() {\n    console.log(\"key pressed\");\n  }\n\n  render() {\n    const upPress = this.useKeyPress('a');\n    return (//<KeyHandler\n      //keyEventName={KEYPRESS}\t\n      //keyValue=\"a\"\n      //onKeyHandle={this.move()}\n      ///>\n      React.createElement(\"div\", {\n        className: \"game\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, upPress), React.createElement(\"div\", {\n        className: \"game-board\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, React.createElement(Board, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"game-info\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }), React.createElement(\"ol\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      })))\n    );\n  }\n\n} //function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 196\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","ReactDOM","KeyHandler","KEYPRESS","useState","useEffect","dimension","Tile","props","onClick","value","gameOver","newNum","tiles","newTiles","slice","row","Math","floor","random","col","Board","Component","constructor","state","createBoard","handleClick","i","j","console","log","setState","renderTile","renderRow","render","status","Game","componentDidMount","componentWillUnmount","useKeyPress","targetKey","keyPressed","setKeyPressed","downHandler","key","upHandler","window","addEventListener","removeEventListener","move","upPress","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { KeyHandler, KEYPRESS } from 'react-key-handler';\nimport { useState, useEffect } from 'react';\nimport './index.css';\n\nconst dimension = 4\n\nfunction Tile(props) {\n\treturn (\n\t\t<button \n\t\t\tclassName=\"tile\" \n\t\t\tonClick={props.onClick}\n\t\t>\n\t\t\t{props.value}\n\t\t</button>\n\t);\n}\n\n// return True if game over\nfunction gameOver() {\n\treturn false;\n}\n\n// generates new num in random spot and updates board\nfunction newNum(tiles) {\n\tlet newTiles = tiles.slice();\n\tlet row = Math.floor(Math.random() * dimension);\t\n\tlet col = Math.floor(Math.random() * dimension);\t\n\tif (tiles[row][col] === 0) {\n\t\tnewTiles[row][col] = 2;\n\t} else {\n\t\tnewNum(tiles);\n\t}\n\treturn newTiles;\n}\n\nclass Board extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\ttiles: this.createBoard(),\n\t\t\tgameOver: false,\n\t\t};\n\t}\n\tcreateBoard(){\n\t\tlet tiles = [\n\t\t\t\t\t\t\t\t\t[0,0,0,0],\n\t\t\t\t\t\t\t\t\t[0,0,0,0],\n\t\t\t\t\t\t\t\t\t[0,0,0,0],\n\t\t\t\t\t\t\t\t\t[0,0,0,0],\n\t\t\t\t\t\t\t\t]\n\t\tlet newTiles= newNum(tiles);\n\t\treturn newTiles; \n\t}\n\thandleClick(i, j) {\n\t\tconsole.log(\"clicked row {i} col {j}\")\n\t\tconst tiles = this.state.tiles.slice();\n\n\t\t//ignore click if game has been won\n\t\t//if (calculateWinner(tiles) || tiles[i]) {\n\t\t\t//return;\n\t\t//}\n\t\t//tiles[i] = this.state.xIsNext ? 'X' : 'O';\n\t\tthis.setState({\n\t\t\ttiles: tiles,\n\t\t\tgameOver: gameOver, \n\t\t\t//xIsNext: !this.state.xIsNext,\n\t\t});\n\t}\n\trenderTile(i, j) {\n\t\treturn (\n\t\t\t<Tile \n\t\t\t\tvalue={this.state.tiles[i][j]}\n\t\t\t\tonClick={() => this.handleClick(i, j)}\n\t\t\t/>\n\t\t);\n\t}\n\trenderRow(i) {\n\t\treturn (\n\t\t\t<div className=\"board-row\">\n\t\t\t\t{this.renderTile(i, 0)}\n\t\t\t\t{this.renderTile(i, 1)}\n\t\t\t\t{this.renderTile(i, 2)}\n\t\t\t\t{this.renderTile(i, 3)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\trender() {\n\t\tlet status = true; // later: replace status with timer\n\t\t//const winner = calculateWinner(this.state.tiles);\n\t\t//let status;\n\t\t//if (winner) {\n\t\t\t//status = 'Winner: ' + winner;\n\t\t//} else {\n\t\t\t//status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\t\t//}\n\t\t\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"status\">{status}</div>\n\t\t\t\t{this.renderRow(0)}\n\t\t\t\t{this.renderRow(1)}\n\t\t\t\t{this.renderRow(2)}\n\t\t\t\t{this.renderRow(3)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass Game extends React.Component {\n\tcomponentDidMount() {\n\t}\n\tcomponentWillUnmount() {\n\t}\n\tuseKeyPress(targetKey) {\n\t\tconst [keyPressed, setKeyPressed] = useState(false);\n\t\t\n\t\tfunction downHandler({key}) {\n\t\t\tif (key === targetKey) {\n\t\t\t\tsetKeyPressed(true);\n\t\t\t}\n\t\t}\n\n\t\tconst upHandler = ({key}) => {\n\t\t\tif (key === targetKey) {\n\t\t\t\tsetKeyPressed(false);\n\t\t\t}\n\t\t};\n\n\t\t// event listeners\n\t\tuseEffect(() => {\n\t\t\twindow.addEventListener('keydown', downHandler);\n\t\t\twindow.addEventListener('keyup', upHandler);\n\n\t\t\t// Remove event listeners on cleanup\n\t\t\treturn () => {\n\t\t\t\twindow.removeEventListener('keydown', downHandler);\n\t\t\t\twindow.removeEventListener('keyup', upHandler);\n\t\t\t};\n\t\t}, []); // Empty array ensures that effect is only run on mount and unmount\n\t\treturn keyPressed;\n\t}\n\tmove() {\n\t\tconsole.log(\"key pressed\")\n\t}\n\trender() {\n\t\tconst upPress = this.useKeyPress('a');\n\t\treturn (\n\t\t\t//<KeyHandler\n\t\t\t\t//keyEventName={KEYPRESS}\t\n\t\t\t\t//keyValue=\"a\"\n\t\t\t\t//onKeyHandle={this.move()}\n\t\t\t///>\n\t\t\t<div className=\"game\">\n\t\t\t\t<div>\n\t\t\t\t\t{upPress}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t<div>{/* status */}</div>\n\t\t\t\t\t<ol>{/* TODO */}</ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n\n//function calculateWinner(tiles) {\n\t//const lines = [\n\t\t//[0, 1, 2],\n\t\t//[3, 4, 5],\n\t\t//[6, 7, 8],\n\t\t//[0, 3, 6],\n\t\t//[1, 4, 7],\n\t\t//[2, 5, 8],\n\t\t//[0, 4, 8],\n\t\t//[2, 4, 6],\n\t//];\n\t//for (let i = 0; i < lines.length; i++) {\n\t\t//const [a, b, c] = lines[i];\n\t\t//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n\t\t\t//return tiles[a];\n\t\t//}\n\t//}\n\t//return null;\n//}\n\n// ========================================\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}