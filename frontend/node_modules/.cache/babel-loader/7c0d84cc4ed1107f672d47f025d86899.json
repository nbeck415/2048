{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/2048-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/2048-frontend/src/components/Board.js\";\nimport React, { createContext, useState, useEffect } from \"react\";\nimport { dimension, DIRECTION, winningTile } from \"../constants.js\";\nimport Tile from \"./Tile.js\";\nimport { StatusBar, GameEndStatus, GameEndDisplay } from \"./GameStatus.js\";\nimport GameContext from \"../gameContext.js\";\n\nconst Board = props => {\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n\n  const _useState = useState(initialTiles),\n        _useState2 = _slicedToArray(_useState, 2),\n        tiles = _useState2[0],\n        setTiles = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        gameEnd = _useState4[0],\n        setGameEnd = _useState4[1];\n\n  const pressed = props.keyPressed;\n\n  const renderTile = (i, j) => {\n    return React.createElement(Tile, {\n      value: tiles[i][j],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14\n      },\n      __self: this\n    });\n  };\n\n  const renderStatus = () => {\n    return React.createElement(StatusBar, {\n      gameEnd: gameEnd,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    });\n  };\n\n  const renderRow = i => {\n    return React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21\n      },\n      __self: this\n    }, renderTile(i, 0), renderTile(i, 1), renderTile(i, 2), renderTile(i, 3));\n  };\n\n  const renderDisplay = () => {\n    if (gameEnd) {\n      return React.createElement(GameEndDisplay, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      });\n    }\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    }, renderRow(0), renderRow(1), renderRow(2), renderRow(3));\n  };\n\n  const updateBoard = () => {\n    var direction = pressed.direction;\n\n    if (direction != null) {\n      // if valid key pressed\n      var newTiles = updateTiles(tiles, direction);\n      setTiles(newTiles);\n      setGameEnd(gameOver(tiles));\n    }\n  };\n\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, renderStatus(), renderDisplay());\n}; //is there a better way of doing this\n\n\nconst gameOver = newTiles => {\n  for (let i = 0; i < dimension; i++) {\n    for (let j = 0; j < dimension; j++) {\n      if (newTiles[i][j] === winningTile) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}; // side effect: modify newTiles\n\n\nconst merge = (newTiles, row1, col1, row2, col2) => {\n  let currentVal = newTiles[row1][col1];\n  let adjacentVal = newTiles[row2][col2];\n  let newVal = currentVal + adjacentVal;\n  newTiles[row1][col1] = currentVal + adjacentVal;\n  newTiles[row2][col2] = 0;\n}; // do \"sliding all the way\" when shift\n\n\nconst slideUp = (newTiles, col) => {\n  //slide incrementally\n  for (let row = 0; row < dimension - 1; row++) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row + 1; //slide next available non blank tile\n\n      while (row2 < dimension - 1 && newTiles[row2][col] === 0) {\n        row2 += 1;\n      }\n\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideLeft = (newTiles, row) => {\n  for (let col = 0; col < dimension - 1; col++) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col + 1;\n\n      while (col2 < dimension - 1 && newTiles[row][col2] === 0) {\n        col2 += 1;\n      }\n\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideDown = (newTiles, col) => {\n  for (let row = dimension - 1; row > 0; row--) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row - 1;\n\n      while (row2 > 0 && newTiles[row2][col] === 0) {\n        row2 -= 1;\n      }\n\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideRight = (newTiles, row) => {\n  for (let col = dimension - 1; col > 0; col--) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col - 1;\n\n      while (col2 > 0 && newTiles[row][col2] === 0) {\n        col2 -= 1;\n      }\n\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n\n  return newTiles;\n};\n\nconst slideWholeBoard = (newTiles, direction) => {\n  for (let col = 0; col < dimension; col++) {\n    switch (direction) {\n      case DIRECTION.UP:\n        slideUp(newTiles, col);\n        break;\n\n      case DIRECTION.DOWN:\n        slideDown(newTiles, col);\n        break;\n\n      case DIRECTION.LEFT:\n        slideLeft(newTiles, col);\n        break;\n\n      case DIRECTION.RIGHT:\n        slideRight(newTiles, col);\n        break;\n\n      default:\n        console.log(\"not a direction\");\n      //do nothing\n    }\n  }\n}; // modify board with merged tiles newTiles up one\n\n\nconst shiftUp = newTiles => {\n  for (let row = 0; row < dimension - 1; row++) {\n    for (let col = 0; col < dimension; col++) {\n      let nextRow = row + 1;\n\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftLeft = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = 0; col < dimension - 1; col++) {\n      let nextCol = col + 1;\n\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst shiftDown = newTiles => {\n  for (let row = dimension - 1; row > 0; row--) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextRow = row - 1;\n\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftRight = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextCol = col - 1;\n\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst fullMerge = (newTiles, direction) => {\n  switch (direction) {\n    case DIRECTION.UP:\n      shiftUp(newTiles);\n      break;\n\n    case DIRECTION.DOWN:\n      shiftDown(newTiles);\n      break;\n\n    case DIRECTION.LEFT:\n      shiftLeft(newTiles);\n      break;\n\n    case DIRECTION.RIGHT:\n      shiftRight(newTiles);\n      break;\n\n    default:\n      console.log(\"not a direction\");\n    //do nothing\n  }\n}; // return random row or col index\n\n\nconst getRandomIndex = () => {\n  return Math.floor(Math.random() * dimension);\n}; // TO DO: detect if no empty tiles left or it will infinitely loop\n// generates new num in random spot and updates board\n\n\nconst generateNewNum = newTiles => {\n  let row = getRandomIndex();\n  let col = getRandomIndex();\n\n  if (newTiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    generateNewNum(newTiles);\n  }\n}; // keep for testing\n// happens in one board update when key pressed\n\n\nconst fullShift = (newTiles, direction) => {\n  slideWholeBoard(newTiles, direction);\n  fullMerge(newTiles, direction);\n  slideWholeBoard(newTiles, direction);\n  return newTiles;\n};\n\nconst updateTiles = (tiles, direction) => {\n  var newTiles = [...tiles];\n  fullShift(newTiles, direction);\n  generateNewNum(newTiles);\n  return newTiles;\n};\n\nexport { Board, merge, slideUp, slideDown, slideWholeBoard, fullMerge, fullShift, updateTiles, gameOver };","map":{"version":3,"sources":["/home/lregina/onboarding/2048/2048-frontend/src/components/Board.js"],"names":["React","createContext","useState","useEffect","dimension","DIRECTION","winningTile","Tile","StatusBar","GameEndStatus","GameEndDisplay","GameContext","Board","props","initialTiles","tiles","setTiles","gameEnd","setGameEnd","pressed","keyPressed","renderTile","i","j","renderStatus","renderRow","renderDisplay","updateBoard","direction","newTiles","updateTiles","gameOver","merge","row1","col1","row2","col2","currentVal","adjacentVal","newVal","slideUp","col","row","slideLeft","slideDown","slideRight","slideWholeBoard","UP","DOWN","LEFT","RIGHT","console","log","shiftUp","nextRow","shiftLeft","nextCol","shiftDown","shiftRight","fullMerge","getRandomIndex","Math","floor","random","generateNewNum","fullShift"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect } from \"react\";\nimport { dimension, DIRECTION, winningTile } from \"../constants.js\";\nimport Tile from \"./Tile.js\";\nimport { StatusBar, GameEndStatus, GameEndDisplay } from \"./GameStatus.js\";\nimport GameContext from \"../gameContext.js\"\n\nconst Board = props => {\n  let initialTiles = [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0]];\n  const [tiles, setTiles] = useState(initialTiles);\n  const [gameEnd, setGameEnd] = useState(false);\n  const pressed = props.keyPressed;\n\n  const renderTile = (i, j) => {\n    return <Tile value={tiles[i][j]} />;\n  };\n  const renderStatus = () => {\n    return <StatusBar gameEnd={gameEnd} />;\n  };\n  const renderRow = i => {\n    return (\n      <div className=\"board-row\">\n        {renderTile(i, 0)}\n        {renderTile(i, 1)}\n        {renderTile(i, 2)}\n        {renderTile(i, 3)}\n      </div>\n    );\n  };\n  const renderDisplay = () => {\n    if (gameEnd) {\n      return <GameEndDisplay />;\n    }\n    return (\n      <div>\n        {renderRow(0)}\n        {renderRow(1)}\n        {renderRow(2)}\n        {renderRow(3)}\n      </div>\n    );\n  };\n  const updateBoard = () => {\n    var direction = pressed.direction;\n    if (direction != null) {\n      // if valid key pressed\n      var newTiles = updateTiles(tiles, direction);\n      setTiles(newTiles);\n      setGameEnd(gameOver(tiles));\n    }\n  };\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n\n  return (\n    <div>\n      {renderStatus()}\n      {renderDisplay()}\n    </div>\n  );\n};\n\n//is there a better way of doing this\nconst gameOver = newTiles => {\n  for (let i = 0; i < dimension; i++) {\n    for (let j = 0; j < dimension; j++) {\n      if (newTiles[i][j] === winningTile) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\n// side effect: modify newTiles\nconst merge = (newTiles, row1, col1, row2, col2) => {\n  let currentVal = newTiles[row1][col1];\n  let adjacentVal = newTiles[row2][col2];\n  let newVal = currentVal + adjacentVal;\n  newTiles[row1][col1] = currentVal + adjacentVal;\n  newTiles[row2][col2] = 0;\n};\n\n// do \"sliding all the way\" when shift\nconst slideUp = (newTiles, col) => {\n  //slide incrementally\n  for (let row = 0; row < dimension - 1; row++) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row + 1;\n      //slide next available non blank tile\n      while (row2 < dimension - 1 && newTiles[row2][col] === 0) {\n        row2 += 1;\n      }\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n  return newTiles;\n};\n\nconst slideLeft = (newTiles, row) => {\n  for (let col = 0; col < dimension - 1; col++) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col + 1;\n      while (col2 < dimension - 1 && newTiles[row][col2] === 0) {\n        col2 += 1;\n      }\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n  return newTiles;\n};\n\nconst slideDown = (newTiles, col) => {\n  for (let row = dimension - 1; row > 0; row--) {\n    if (newTiles[row][col] === 0) {\n      let row2 = row - 1;\n      while (row2 > 0 && newTiles[row2][col] === 0) {\n        row2 -= 1;\n      }\n      merge(newTiles, row, col, row2, col);\n    }\n  }\n  return newTiles;\n};\n\nconst slideRight = (newTiles, row) => {\n  for (let col = dimension - 1; col > 0; col--) {\n    if (newTiles[row][col] === 0) {\n      let col2 = col - 1;\n      while (col2 > 0 && newTiles[row][col2] === 0) {\n        col2 -= 1;\n      }\n      merge(newTiles, row, col, row, col2);\n    }\n  }\n  return newTiles;\n};\n\nconst slideWholeBoard = (newTiles, direction) => {\n  for (let col = 0; col < dimension; col++) {\n    switch (direction) {\n      case DIRECTION.UP:\n        slideUp(newTiles, col);\n        break;\n      case DIRECTION.DOWN:\n        slideDown(newTiles, col);\n        break;\n      case DIRECTION.LEFT:\n        slideLeft(newTiles, col);\n        break;\n      case DIRECTION.RIGHT:\n        slideRight(newTiles, col);\n        break;\n      default:\n        console.log(\"not a direction\");\n      //do nothing\n    }\n  }\n};\n\n// modify board with merged tiles newTiles up one\nconst shiftUp = newTiles => {\n  for (let row = 0; row < dimension - 1; row++) {\n    for (let col = 0; col < dimension; col++) {\n      let nextRow = row + 1;\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftLeft = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = 0; col < dimension - 1; col++) {\n      let nextCol = col + 1;\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst shiftDown = newTiles => {\n  for (let row = dimension - 1; row > 0; row--) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextRow = row - 1;\n      if (newTiles[row][col] === newTiles[nextRow][col]) {\n        merge(newTiles, row, col, nextRow, col);\n      }\n    }\n  }\n};\n\nconst shiftRight = newTiles => {\n  for (let row = 0; row < dimension; row++) {\n    for (let col = dimension - 1; col > 0; col--) {\n      let nextCol = col - 1;\n      if (newTiles[row][col] === newTiles[row][nextCol]) {\n        merge(newTiles, row, col, row, nextCol);\n      }\n    }\n  }\n};\n\nconst fullMerge = (newTiles, direction) => {\n  switch (direction) {\n    case DIRECTION.UP:\n      shiftUp(newTiles);\n      break;\n    case DIRECTION.DOWN:\n      shiftDown(newTiles);\n      break;\n    case DIRECTION.LEFT:\n      shiftLeft(newTiles);\n      break;\n    case DIRECTION.RIGHT:\n      shiftRight(newTiles);\n      break;\n    default:\n      console.log(\"not a direction\");\n    //do nothing\n  }\n};\n\n// return random row or col index\nconst getRandomIndex = () => {\n  return Math.floor(Math.random() * dimension);\n};\n\n// TO DO: detect if no empty tiles left or it will infinitely loop\n// generates new num in random spot and updates board\nconst generateNewNum = newTiles => {\n  let row = getRandomIndex();\n  let col = getRandomIndex();\n  if (newTiles[row][col] === 0) {\n    newTiles[row][col] = 2;\n  } else {\n    generateNewNum(newTiles);\n  }\n};\n\n// keep for testing\n// happens in one board update when key pressed\nconst fullShift = (newTiles, direction) => {\n  slideWholeBoard(newTiles, direction);\n  fullMerge(newTiles, direction);\n  slideWholeBoard(newTiles, direction);\n  return newTiles;\n};\n\nconst updateTiles = (tiles, direction) => {\n  var newTiles = [...tiles];\n  fullShift(newTiles, direction);\n  generateNewNum(newTiles);\n  return newTiles;\n};\n\nexport {\n  Board,\n  merge,\n  slideUp,\n  slideDown,\n  slideWholeBoard,\n  fullMerge,\n  fullShift,\n  updateTiles,\n  gameOver\n};\n"]},"metadata":{},"sourceType":"module"}