{"ast":null,"code":"import _slicedToArray from \"/home/lregina/onboarding/2048/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/lregina/onboarding/2048/frontend/src/index.js\";\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DIRECTION } from \"./constants.js\";\nimport { Board } from \"./components/Board.js\";\nimport ScoreForm from \"./components/ScoreForm.js\"; // key press handler using vim keys\n\nconst useKeyPress = () => {\n  const _useState = useState({\n    direction: null\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        keyPressed = _useState2[0],\n        setKeyPressed = _useState2[1];\n\n  const downHandler = ({\n    key\n  }) => {\n    let pressed = null;\n\n    switch (key) {\n      case \"k\":\n        pressed = DIRECTION.UP;\n        break;\n\n      case \"j\":\n        pressed = DIRECTION.DOWN;\n        break;\n\n      case \"h\":\n        pressed = DIRECTION.LEFT;\n        break;\n\n      case \"l\":\n        pressed = DIRECTION.RIGHT;\n        break;\n\n      default:\n        pressed = null;\n        break;\n    }\n\n    setKeyPressed({\n      direction: pressed\n    });\n  }; // Add event listeners\n\n\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n\n  return keyPressed;\n};\n\nconst Game = () => {\n  //const [gameOver, setGameOver] = useState(false);\n  return React.createElement(\"div\", {\n    className: \"game\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"My token= \", window.token, \" \"), React.createElement(ScoreForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"game-board\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, React.createElement(Board, {\n    keyPressed: useKeyPress(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  })));\n}; //<Board\n//keyPressed={useKeyPress()}\n//over={(isEnd) => {setGameOver(isEnd) }}\n///>\n//<GameContext.Provider value={{gameOver: true}}></GameContext.Provider>\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67\n  },\n  __self: this\n}), document.getElementById(\"root\"));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/frontend/src/index.js"],"names":["React","useState","useEffect","ReactDOM","DIRECTION","Board","ScoreForm","useKeyPress","direction","keyPressed","setKeyPressed","downHandler","key","pressed","UP","DOWN","LEFT","RIGHT","window","addEventListener","removeEventListener","Game","token","render","document","getElementById"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,OAAOC,SAAP,MAAsB,2BAAtB,C,CAEA;;AACA,MAAMC,WAAW,GAAG,MAAM;AAAA,oBACYN,QAAQ,CAAC;AAAEO,IAAAA,SAAS,EAAE;AAAb,GAAD,CADpB;AAAA;AAAA,QACjBC,UADiB;AAAA,QACLC,aADK;;AAGxB,QAAMC,WAAW,GAAG,CAAC;AAAEC,IAAAA;AAAF,GAAD,KAAa;AAC/B,QAAIC,OAAO,GAAG,IAAd;;AACA,YAAQD,GAAR;AACE,WAAK,GAAL;AACEC,QAAAA,OAAO,GAAGT,SAAS,CAACU,EAApB;AACA;;AACF,WAAK,GAAL;AACED,QAAAA,OAAO,GAAGT,SAAS,CAACW,IAApB;AACA;;AACF,WAAK,GAAL;AACEF,QAAAA,OAAO,GAAGT,SAAS,CAACY,IAApB;AACA;;AACF,WAAK,GAAL;AACEH,QAAAA,OAAO,GAAGT,SAAS,CAACa,KAApB;AACA;;AACF;AACEJ,QAAAA,OAAO,GAAG,IAAV;AACA;AAfJ;;AAiBAH,IAAAA,aAAa,CAAC;AAAEF,MAAAA,SAAS,EAAEK;AAAb,KAAD,CAAb;AACD,GApBD,CAHwB,CAyBxB;;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdgB,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAmCR,WAAnC;AAEA,WAAO,MAAM;AACXO,MAAAA,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCT,WAAtC;AACD,KAFD;AAGD,GANQ,EAMN,EANM,CAAT,CA1BwB,CAgChB;;AACR,SAAOF,UAAP;AACD,CAlCD;;AAsCA,MAAMY,IAAI,GAAG,MAAM;AACjB;AAEA,SACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAcH,MAAM,CAACI,KAArB,MADC,EAED,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFC,EAGE;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAEf,WAAW,EAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAHF,CADF;AASD,CAZD,C,CAcA;AACA;AACA;AACA;AACA;AACA;;;AAEAJ,QAAQ,CAACoB,MAAT,CAAgB,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAhB,EAA0BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { DIRECTION } from \"./constants.js\";\nimport { Board } from \"./components/Board.js\";\nimport ScoreForm from \"./components/ScoreForm.js\";\n\n// key press handler using vim keys\nconst useKeyPress = () => {\n  const [keyPressed, setKeyPressed] = useState({ direction: null });\n\n  const downHandler = ({ key }) => {\n    let pressed = null;\n    switch (key) {\n      case \"k\":\n        pressed = DIRECTION.UP;\n        break;\n      case \"j\":\n        pressed = DIRECTION.DOWN;\n        break;\n      case \"h\":\n        pressed = DIRECTION.LEFT;\n        break;\n      case \"l\":\n        pressed = DIRECTION.RIGHT;\n        break;\n      default:\n        pressed = null;\n        break;\n    }\n    setKeyPressed({ direction: pressed });\n  };\n\n  // Add event listeners\n  useEffect(() => {\n    window.addEventListener(\"keydown\", downHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n    };\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n  return keyPressed;\n};\n\n\n\nconst Game = () => {\n  //const [gameOver, setGameOver] = useState(false);\n\n  return (\n    <div className=\"game\">\n\t\t\t<p>My token= {window.token} </p>\n\t\t\t<ScoreForm/>\n      <div className=\"game-board\">\n        <Board keyPressed={useKeyPress()} />\n      </div>\n    </div>\n  );\n};\n\n//<Board\n//keyPressed={useKeyPress()}\n//over={(isEnd) => {setGameOver(isEnd) }}\n///>\n//<GameContext.Provider value={{gameOver: true}}></GameContext.Provider>\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"]},"metadata":{},"sourceType":"module"}