{"ast":null,"code":"var _jsxFileName = \"/home/lregina/onboarding/2048/src/index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Tile(props) {\n  return React.createElement(\"button\", {\n    className: \"tile\",\n    onClick: props.onClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.value);\n} // create empty board\n\n\nclass Board extends React.Component {\n  //board logic and values, empty at init\n  createBoard() {\n    dimension = 4;\n    let board = Array(dimension);\n\n    for (let i = 0; i < board.length; i++) {\n      for (let j = 0; j < row.length; j++) {\n        board[i][j] = 2;\n      }\n    }\n\n    return board;\n  }\n\n  renderTile(i) {\n    return React.createElement(Tile //value={this.state.tiles[i]}\n    , {\n      value: 2,\n      onClick: () => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    });\n  }\n\n  createBoard() {}\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      //tiles: Array(16).fill(null),\n      tiles: this.createBoard(),\n      gameOver: false\n    };\n  }\n\n  handleClick(i) {\n    const tiles = this.state.tiles.slice(); //ignore click if game has been won\n    //if (calculateWinner(tiles) || tiles[i]) {\n    //return;\n    //}\n    //tiles[i] = this.state.xIsNext ? 'X' : 'O';\n\n    this.setState({\n      tiles: tiles,\n      gameOver: gameOver() //xIsNext: !this.state.xIsNext,\n\n    });\n  }\n\n  renderTile(i) {\n    return React.createElement(Tile, {\n      value: this.state.tiles[i],\n      onClick: () => this.handleClick(i),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n  } //createBoard() {\n  //let board = []\n  //for (let i =0; i < 4; i++) {\n  //let row=[]\n  //for (let j=0; j < 4; j++) {\n  //row.push(this.renderTile(i))\n  //}\n  //board.push(<div>{row}</div>)\t\n  //}\n  //return board\n  //}\n  //render() {\n  //return (\n  //<div>\n  //{this.createBoard}\n  //</div>\n  //)\n  //}\n\n\n  render() {\n    let status = true; //const winner = calculateWinner(this.state.tiles);\n    //let status;\n    //if (winner) {\n    //status = 'Winner: ' + winner;\n    //} else {\n    //status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    //}\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"status\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, status), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, this.renderTile(0), this.renderTile(1), this.renderTile(2), this.renderTile(3)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, this.renderTile(4), this.renderTile(5), this.renderTile(6), this.renderTile(7)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, this.renderTile(8), this.renderTile(9), this.renderTile(10), this.renderTile(11)), React.createElement(\"div\", {\n      className: \"board-row\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, this.renderTile(12), this.renderTile(13), this.renderTile(14), this.renderTile(15)));\n  }\n\n}\n\nclass Game extends React.Component {\n  render() {\n    return React.createElement(\"div\", {\n      className: \"game\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"game-board\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(Board, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"game-info\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }), React.createElement(\"ol\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    })));\n  }\n\n} // return True if game over\n\n\nfunction gameOver() {\n  return false;\n} //function calculateWinner(tiles) {\n//const lines = [\n//[0, 1, 2],\n//[3, 4, 5],\n//[6, 7, 8],\n//[0, 3, 6],\n//[1, 4, 7],\n//[2, 5, 8],\n//[0, 4, 8],\n//[2, 4, 6],\n//];\n//for (let i = 0; i < lines.length; i++) {\n//const [a, b, c] = lines[i];\n//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n//return tiles[a];\n//}\n//}\n//return null;\n//}\n// ========================================\n\n\nReactDOM.render(React.createElement(Game, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 180\n  },\n  __self: this\n}), document.getElementById('root'));","map":{"version":3,"sources":["/home/lregina/onboarding/2048/src/index.js"],"names":["React","ReactDOM","Tile","props","onClick","value","Board","Component","createBoard","dimension","board","Array","i","length","j","row","renderTile","handleClick","constructor","state","tiles","gameOver","slice","setState","render","status","Game","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Tile(props) {\n\treturn (\n\t\t<button \n\t\t\tclassName=\"tile\" \n\t\t\tonClick={props.onClick}\n\t\t>\n\t\t\t{props.value}\n\t\t</button>\n\t);\n}\n\n\n// create empty board\n\nclass Board extends React.Component {\n\t//board logic and values, empty at init\n\tcreateBoard(){\n\t\tdimension = 4\n\t\tlet board = Array(dimension)\n\t\tfor (let i = 0; i < board.length; i++) {\n\t\t\tfor (let j = 0; j < row.length; j++) {\n\t\t\t\tboard[i][j] = 2\n\t\t\t}\n\t\t}\n\t\treturn board\n\t}\n\trenderTile(i) {\n\t\treturn (\n\t\t\t<Tile \n\t\t\t\t//value={this.state.tiles[i]}\n\t\t\t\tvalue={2}\n\t\t\t\tonClick={() => this.handleClick(i)}\n\t\t\t/>\n\t\t);\n\t}\n\tcreateBoard() {\n\t}\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t//tiles: Array(16).fill(null),\n\t\t\ttiles: this.createBoard(),\n\t\t\tgameOver: false,\n\t\t};\n\t}\n\thandleClick(i) {\n\t\tconst tiles = this.state.tiles.slice();\n\n\t\t//ignore click if game has been won\n\t\t//if (calculateWinner(tiles) || tiles[i]) {\n\t\t\t//return;\n\t\t//}\n\t\t//tiles[i] = this.state.xIsNext ? 'X' : 'O';\n\t\tthis.setState({\n\t\t\ttiles: tiles,\n\t\t\tgameOver: gameOver(), \n\t\t\t//xIsNext: !this.state.xIsNext,\n\t\t});\n\t}\n\trenderTile(i) {\n\t\treturn (\n\t\t\t<Tile \n\t\t\t\tvalue={this.state.tiles[i]}\n\t\t\t\tonClick={() => this.handleClick(i)}\n\t\t\t/>\n\t\t);\n\t}\n\n\t//createBoard() {\n\t\t//let board = []\n\t\t//for (let i =0; i < 4; i++) {\n\t\t\t//let row=[]\n\t\t\t//for (let j=0; j < 4; j++) {\n\t\t\t\t//row.push(this.renderTile(i))\n\t\t\t//}\n\t\t\t//board.push(<div>{row}</div>)\t\n\t\t//}\n\t\t//return board\n\t//}\n\n\t//render() {\n\t\t//return (\n\t\t\t//<div>\n\t\t\t\t//{this.createBoard}\n\t\t\t//</div>\n\t\t//)\n\t//}\n\n\trender() {\n\t\tlet status = true;\n\t\t//const winner = calculateWinner(this.state.tiles);\n\t\t//let status;\n\t\t//if (winner) {\n\t\t\t//status = 'Winner: ' + winner;\n\t\t//} else {\n\t\t\t//status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n\t\t//}\n\t\t\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<div className=\"status\">{status}</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderTile(0)}\n\t\t\t\t\t{this.renderTile(1)}\n\t\t\t\t\t{this.renderTile(2)}\n\t\t\t\t\t{this.renderTile(3)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderTile(4)}\n\t\t\t\t\t{this.renderTile(5)}\n\t\t\t\t\t{this.renderTile(6)}\n\t\t\t\t\t{this.renderTile(7)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderTile(8)}\n\t\t\t\t\t{this.renderTile(9)}\n\t\t\t\t\t{this.renderTile(10)}\n\t\t\t\t\t{this.renderTile(11)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderTile(12)}\n\t\t\t\t\t{this.renderTile(13)}\n\t\t\t\t\t{this.renderTile(14)}\n\t\t\t\t\t{this.renderTile(15)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nclass Game extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board />\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t<div>{/* status */}</div>\n\t\t\t\t\t<ol>{/* TODO */}</ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// return True if game over\nfunction gameOver() {\n\treturn false;\n}\n\n//function calculateWinner(tiles) {\n\t//const lines = [\n\t\t//[0, 1, 2],\n\t\t//[3, 4, 5],\n\t\t//[6, 7, 8],\n\t\t//[0, 3, 6],\n\t\t//[1, 4, 7],\n\t\t//[2, 5, 8],\n\t\t//[0, 4, 8],\n\t\t//[2, 4, 6],\n\t//];\n\t//for (let i = 0; i < lines.length; i++) {\n\t\t//const [a, b, c] = lines[i];\n\t\t//if (tiles[a] && tiles[a] === tiles[b] && tiles[a] === tiles[c]) {\n\t\t\t//return tiles[a];\n\t\t//}\n\t//}\n\t//return null;\n//}\n\n// ========================================\n\nReactDOM.render(\n\t<Game />,\n\tdocument.getElementById('root')\n);\n"]},"metadata":{},"sourceType":"module"}