{"version":3,"sources":["constants.js","components/board.js","components/stopwatch.js","components/scoreForm.js","serviceWorker.js","index.js"],"names":["DIRECTION","Tile","props","className","value","Board","defaultProps","keyPressed","useContext","GameContext","gameOver","setGameOver","BoardContext","tiles","setTiles","pressed","useEffect","direction","newTiles","move","isGameOver","updateBoard","renderTile","i","j","renderRow","merge","row1","col1","row2","col2","currentVal","adjacentVal","slideUp","col","row","dimension","slideLeft","slideDown","slideRight","slide","console","log","shift","nextRow","shiftUp","shiftDown","nextCol","shiftLeft","shiftRight","getRandomIndex","Math","floor","random","updateTiles","generateNewNum","Stopwatch","setGameTime","TimeContext","useState","paused","setPaused","hours","minutes","seconds","time","setTime","tick","newHours","newMinutes","newSeconds","padTime","timeComponent","toString","padStart","timerId","setInterval","clearInterval","formattedHours","formattedMinutes","formattedSeconds","timeString","formattedTime","onClick","ScoreForm","method","action","type","name","placeholder","score","Boolean","window","location","hostname","match","useKeyPress","setKeyPressed","downHandler","key","addEventListener","removeEventListener","React","createContext","ReactDOM","render","gameTime","endTime","topScores","token","renderStatus","Provider","map","id","scoreValue","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.0d67556b.chunk.js","sourcesContent":["export const dimension = 4;\nexport const DIRECTION = {\n  UP: \"up\",\n  DOWN: \"down\",\n  LEFT: \"left\",\n  RIGHT: \"right\"\n};\nexport const winningTile = 16;\n","import React, { useEffect, useContext } from \"react\";\nimport PropTypes from 'prop-types';\nimport { dimension, DIRECTION, winningTile } from \"../constants.js\";\n//import ScoreForm from \"./scoreForm.js\";\nimport { GameContext, BoardContext } from '../index.js'\nimport '../style.css'\n\nconst Tile = props => {\n\tTile.propTypes = {\n\t\tvalue: PropTypes.number,\n\t}\n  return (\n    <button className=\"tile\">\n      {props.value}\n    </button>\n  );\n};\n\nconst Board = props => {\n\tBoard.propTypes = {\n\t\tkeyPressed: DIRECTION.isRequired,\n\t}\n\tBoard.defaultProps = {\n\t\tkeyPressed: DIRECTION.UP,\n\t}\n\n\tconst { gameOver, setGameOver} = \n\t\tuseContext(GameContext);\n\n\tconst {tiles, setTiles} = useContext(BoardContext);\n\n  const pressed = props.keyPressed;\n\t\n  const updateBoard = () => {\n    var direction = pressed.direction;\n    if (direction != null) {\n      // if valid key pressed\n      var newTiles = move(tiles, direction);\n      setTiles(newTiles);\n\t\t\tif (isGameOver(tiles)) {\n\t\t\t\tsetGameOver(true);\n\t\t\t}\n    }\n  };\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n\n///////////////////////////////////////////////////////////////////////////////\t\n\t//Handle RENDERING\n///////////////////////////////////////////////////////////////////////////////\t\n  const renderTile = (i, j) => {\n    return <Tile value={tiles[i][j]} />;\n  };\n\tconst renderRow = i => {\n\t\treturn (\n\t\t\t<div className=\"board-row\">\n\t\t\t\t{renderTile(i, 0)}\n\t\t\t\t{renderTile(i, 1)}\n\t\t\t\t{renderTile(i, 2)}\n\t\t\t\t{renderTile(i, 3)}\n\t\t\t</div>\n\t\t);\n\t};\n  const renderBoardDisplay = () => {\n    if (gameOver) {\n      return (\n        <div>\n\t\t\t\t\t<p>Whoo!</p>\n        </div>\n      );\n    }\n    return (\n      <div>\n        {renderRow(0)}\n        {renderRow(1)}\n        {renderRow(2)}\n        {renderRow(3)}\n      </div>\n    );\n  };\n\n\t//Try to move this to Game\n  //const renderStatus = () => {\n    //if (gameOver) {\n      //endTime = time;\n      //return (\n\t\t\t\t//<div>\n\t\t\t\t\t//<p> You won! Your time is {endTime} </p>\n\t\t\t\t\t//<ScoreForm score={endTime}/>\n\t\t\t\t//</div>\n\t\t\t//);\n    //}\n    //return (\n      //<Stopwatch\n        //setGameTime={stopwatchTime => {\n          //setTime(stopwatchTime);\n        //}}\n      ///>\n    //);\n  //};\n  return (\n    <div>\n      {renderBoardDisplay()}\n    </div>\n  );\n};\n\n// get rid of this later\n\tconst isGameOver = newTiles => {\n\t\tfor (let i = 0; i < dimension; i++) {\n\t\t\tfor (let j = 0; j < dimension; j++) {\n\t\t\t\tif (newTiles[i][j] === winningTile) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\n\t/**\n\t * Merge new from row2, col2, into row1, col1\n\t * @param {number} row1 row in which new total resides \n\t * @param {number} col1 col in which new total resides\n\t * @param {number} row2 row to be cleared upon merge\n\t * @param {number} col2 col to be cleared upon merge\n\t */\n\tconst merge = (newTiles, row1, col1, row2, col2) => {\n\t\tlet currentVal = newTiles[row1][col1];\n\t\tlet adjacentVal = newTiles[row2][col2];\n\t\tnewTiles[row1][col1] = currentVal + adjacentVal;\n\t\tnewTiles[row2][col2] = 0;\n\t};\n\n\t// do \"sliding all the way\" when shift\n\tconst slideUp = (newTiles, col) => {\n\t\t//slide incrementally\n\t\tfor (let row = 0; row < dimension - 1; row++) {\n\t\t\tif (newTiles[row][col] === 0) {\n\t\t\t\tlet row2 = row + 1;\n\t\t\t\t//slide next available non blank tile\n\t\t\t\twhile (row2 < dimension - 1 && newTiles[row2][col] === 0) {\n\t\t\t\t\trow2 += 1;\n\t\t\t\t}\n\t\t\t\tmerge(newTiles, row, col, row2, col);\n\t\t\t}\n\t\t}\n\t\treturn newTiles;\n\t};\n\n\tconst slideLeft = (newTiles, row) => {\n\t\tfor (let col = 0; col < dimension - 1; col++) {\n\t\t\tif (newTiles[row][col] === 0) {\n\t\t\t\tlet col2 = col + 1;\n\t\t\t\twhile (col2 < dimension - 1 && newTiles[row][col2] === 0) {\n\t\t\t\t\tcol2 += 1;\n\t\t\t\t}\n\t\t\t\tmerge(newTiles, row, col, row, col2);\n\t\t\t}\n\t\t}\n\t\treturn newTiles;\n\t};\n\n\tconst slideDown = (newTiles, col) => {\n\t\tfor (let row = dimension - 1; row > 0; row--) {\n\t\t\tif (newTiles[row][col] === 0) {\n\t\t\t\tlet row2 = row - 1;\n\t\t\t\twhile (row2 > 0 && newTiles[row2][col] === 0) {\n\t\t\t\t\trow2 -= 1;\n\t\t\t\t}\n\t\t\t\tmerge(newTiles, row, col, row2, col);\n\t\t\t}\n\t\t}\n\t\treturn newTiles;\n\t};\n\n\tconst slideRight = (newTiles, row) => {\n\t\tfor (let col = dimension - 1; col > 0; col--) {\n\t\t\tif (newTiles[row][col] === 0) {\n\t\t\t\tlet col2 = col - 1;\n\t\t\t\twhile (col2 > 0 && newTiles[row][col2] === 0) {\n\t\t\t\t\tcol2 -= 1;\n\t\t\t\t}\n\t\t\t\tmerge(newTiles, row, col, row, col2);\n\t\t\t}\n\t\t}\n\t\treturn newTiles;\n\t};\n\n\tconst slide = (newTiles, direction) => {\n\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\tswitch (direction) {\n\t\t\t\tcase DIRECTION.UP:\n\t\t\t\t\tslideUp(newTiles, col);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIRECTION.DOWN:\n\t\t\t\t\tslideDown(newTiles, col);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIRECTION.LEFT:\n\t\t\t\t\tslideLeft(newTiles, col);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIRECTION.RIGHT:\n\t\t\t\t\tslideRight(newTiles, col);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: // do nothing\n\t\t\t\t\tconsole.log(\"not a direction\");\n\t\t\t}\n\t\t}\n\t};\n\n\t// modify board with merged tiles newTiles up one\n\tconst shiftUp = newTiles => {\n\t\tfor (let row = 0; row < dimension - 1; row++) {\n\t\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\t\tlet nextRow = row + 1;\n\t\t\t\tif (newTiles[row][col] === newTiles[nextRow][col]) {\n\t\t\t\t\tmerge(newTiles, row, col, nextRow, col);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst shiftLeft = newTiles => {\n\t\tfor (let row = 0; row < dimension; row++) {\n\t\t\tfor (let col = 0; col < dimension - 1; col++) {\n\t\t\t\tlet nextCol = col + 1;\n\t\t\t\tif (newTiles[row][col] === newTiles[row][nextCol]) {\n\t\t\t\t\tmerge(newTiles, row, col, row, nextCol);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst shiftDown = newTiles => {\n\t\tfor (let row = dimension - 1; row > 0; row--) {\n\t\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\t\tlet nextRow = row - 1;\n\t\t\t\tif (newTiles[row][col] === newTiles[nextRow][col]) {\n\t\t\t\t\tmerge(newTiles, row, col, nextRow, col);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst shiftRight = newTiles => {\n\t\tfor (let row = 0; row < dimension; row++) {\n\t\t\tfor (let col = dimension - 1; col > 0; col--) {\n\t\t\t\tlet nextCol = col - 1;\n\t\t\t\tif (newTiles[row][col] === newTiles[row][nextCol]) {\n\t\t\t\t\tmerge(newTiles, row, col, row, nextCol);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst shift = (newTiles, direction) => {\n\t\tswitch (direction) {\n\t\t\tcase DIRECTION.UP:\n\t\t\t\tshiftUp(newTiles);\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.DOWN:\n\t\t\t\tshiftDown(newTiles);\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.LEFT:\n\t\t\t\tshiftLeft(newTiles);\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.RIGHT:\n\t\t\t\tshiftRight(newTiles);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"not a direction\");\n\t\t\t//do nothing\n\t\t}\n\t};\n\n\t/** \n\t * return random row or col index\n\t */\n\tconst getRandomIndex = () => {\n\t\treturn Math.floor(Math.random() * dimension);\n\t};\n\n\t/**\n\t * Generates new num in random spot and updates board\n\t */\n\tconst generateNewNum = newTiles => {\n\t\tlet row = getRandomIndex();\n\t\tlet col = getRandomIndex();\n\t\tif (newTiles[row][col] === 0) {\n\t\t\tnewTiles[row][col] = 2;\n\t\t} else {\n\t\t\tgenerateNewNum(newTiles);\n\t\t}\n\t};\n\n\t/**\n\t * Update board tiles in specified direction\n\t * @param {DIRECTION} direction to shift board\n\t */\n\tconst updateTiles = (newTiles, direction) => {\n\t\tslide(newTiles, direction);\n\t\tshift(newTiles, direction);\n\t\tslide(newTiles, direction);\n\t\treturn newTiles;\n\t};\n\n\t/**\n\t * Handle changes when one key is pressed\n\t */\n\tconst move = (tiles, direction) => {\n\t\tvar newTiles = [...tiles];\n\t\tupdateTiles(newTiles, direction);\n\t\tgenerateNewNum(newTiles);\n\t\treturn newTiles;\n\t};\n\nexport {\n  Board,\n  merge,\n  slideUp,\n  slideDown,\n  slide,\n  shift,\n  updateTiles,\n  move\n};\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { TimeContext } from '../index.js'\n//import PropTypes from 'prop-types';\n\nconst Stopwatch = props => {\n\t//Stopwatch.propTypes = {\n\t\t//setGameTime: PropTypes.func,\n\t//}\n\tconst { setGameTime } = useContext(TimeContext);\n\n  var [paused, setPaused] = useState(false);\n  var [time, setTime] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n  // let one second pass\n  const tick = () => {\n    if (paused) {\n      return;\n    }\n    var newHours = time.hours;\n    var newMinutes = time.minutes;\n    var newSeconds = time.seconds + 1;\n\n    if (newSeconds === 60) {\n      setTime({\n        hours: time.hours,\n        minutes: time.minutes + 1,\n        seconds: 0\n      });\n      newSeconds = 0;\n      newMinutes += 1;\n    }\n    if (newMinutes === 60) {\n      newMinutes = 0;\n      newHours += 1;\n    }\n    setTime({\n      hours: newHours,\n      minutes: newMinutes,\n      seconds: newSeconds\n    });\n  };\n\n  const padTime = timeComponent => {\n    return timeComponent.toString().padStart(2, \"0\");\n  };\n\n  const formattedTime = () => {\n    var formattedHours = padTime(time.hours);\n    var formattedMinutes = padTime(time.minutes);\n    var formattedSeconds = padTime(time.seconds);\n    var timeString = \n\t\t\t`${formattedHours}: ${formattedMinutes}: ${formattedSeconds}`;\n\t\tsetGameTime(timeString);\n    //props.setGameTime(timeString);\n    return timeString;\n  };\n\n  useEffect(() => {\n    let timerId = setInterval(tick, 1000); // tick every sec \n    return () => {\n      clearInterval(timerId);\n    };\n  }, [time]);\n\n  return (\n    <div>\n      <p>Time: {formattedTime()}</p>\n\t\t\t<button onClick={() => setPaused(!paused)}>\n\t\t\t\t{paused ? \"Resume\" : \"Pause\"}\n\t\t\t</button>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst ScoreForm = props => {\n\tScoreForm.propTypes = {\n\t\tscore: PropTypes.number, \n\t}\n\n\treturn (\n\t\t<form method='POST' action='/'>\n\t\t\t<input type=\"text\" name=\"name\" placeholder=\"Enter name\"/>\n\t\t\t<input type=\"text\" name=\"scoreValue\" value={props.score}/>\n\t\t\t<input type=\"submit\" value=\"Submit\"/>\n\t\t</form>\n\t);\n};\n\nexport default ScoreForm;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DIRECTION } from './constants.js';\nimport { Board } from './components/board.js';\nimport Stopwatch from \"./components/stopwatch.js\";\nimport ScoreForm from \"./components/scoreForm.js\";\nimport './style.css';\nimport * as serviceWorker from './serviceWorker'; \n//import Stopwatch from './components/Stopwatch.js'\n\n// key press handler using vim keys\nconst useKeyPress = () => {\n  const [keyPressed, setKeyPressed] = useState({ direction: null });\n\n  const downHandler = ({ key }) => {\n    let pressed = null;\n    switch (key) {\n      case 'k':\n        pressed = DIRECTION.UP;\n        break;\n      case 'j':\n        pressed = DIRECTION.DOWN;\n        break;\n      case 'h':\n        pressed = DIRECTION.LEFT;\n        break;\n      case 'l':\n        pressed = DIRECTION.RIGHT;\n        break;\n      default:\n        pressed = null;\n        break;\n    }\n    setKeyPressed({ direction: pressed });\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, []);\n  return keyPressed;\n};\n\n\nexport const GameContext = React.createContext();\nexport const TimeContext = React.createContext();\nexport const BoardContext = React.createContext();\n\nconst Game = () => {\n\tconst initialTime = '00:00:00'\n  const initialTiles = [[0, 0, 0, 0], \n\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0], \n\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0], \n\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0]];\n\n  const [gameOver, setGameOver] = useState(false);\n\tconst [gameTime, setGameTime] = useState(initialTime); // where time indicates endtime\n\n\tconst [tiles, setTiles] = useState(initialTiles);\n\n  var endTime = null;\n\n\t// High scores\n\tvar topScores = window.token; //list of json name, score objects\n\tconst displayScores = () => {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ topScores.map(score => \n\t\t\t\t\t<div key={score.id}>\n\t\t\t\t\t\t<p>{score.name}: {score.scoreValue} </p> \n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n\n  const renderStatus = () => {\n    if (gameOver) {\n      endTime = gameTime;\n      return (\n\t\t\t\t<div>\n\t\t\t\t\t<p> You won! Your time is {endTime} </p>\n\t\t\t\t\t<ScoreForm score={endTime}/>\n\t\t\t\t</div>\n\t\t\t);\n    }\n    return (\n\t\t\t<TimeContext.Provider value={{ setGameTime }}>\n\t\t\t\t<Stopwatch/>\n\t\t\t</TimeContext.Provider>\n      //<Stopwatch\n        //setGameTime={stopwatchTime => {\n          //setTime(stopwatchTime);\n        //}}\n      ///>\n    );\n  };\n\t// Game \n  return (\n\t\t\t<>\n\t\t\t\t<div>\n\t\t\t\t\t{renderStatus()}\n\t\t\t\t</div>\n\t\t\t\t<div className='game'>\n\t\t\t\t\t<GameContext.Provider value={{ gameOver, setGameOver }}>\n\t\t\t\t\t\t<BoardContext.Provider value = {{ tiles, setTiles }}>\n\t\t\t\t\t\t\t<Board keyPressed={useKeyPress()} />\n\t\t\t\t\t\t</BoardContext.Provider>\n\t\t\t\t\t\t\t{renderStatus}\n\t\t\t\t\t</GameContext.Provider>\n\t\t\t\t\t<h2>High Scores</h2>\n\t\t\t\t\t{ displayScores()}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<h3>Directions</h3>\n\t\t\t\t\t<p>h: left, k: up, j: down, l: right </p>\n\t\t\t\t</div>\n\t\t\t</>\n  );\n};\n\n//<Board\n//keyPressed={useKeyPress()}\n//over={(isEnd) => {setGameOver(isEnd) }}\n///>\n//<GameContext.Provider value={{gameOver: true}}></GameContext.Provider>\n// ========================================\n\nReactDOM.render(<Game />, document.getElementById('root'));\nserviceWorker.unregister()\n"],"sourceRoot":""}