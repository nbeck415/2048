{"version":3,"sources":["constants.js","components/board.js","components/stopwatch.js","components/displayComponents.js","gameLogic.js","themes.js","serviceWorker.js","index.js"],"names":["DIRECTION","initialTiles","THEMES","Tile","props","tileNum","value","tileType","tileClasses","className","Board","tiles","useContext","BoardContext","rows","renderRow","i","map","row","j","renderTile","Stopwatch","setGameTime","TimeContext","useState","paused","setPaused","hours","minutes","seconds","time","setTime","tick","newHours","newMinutes","newSeconds","padTime","timeComponent","toString","padStart","useEffect","timerId","setInterval","clearInterval","formattedHours","formattedMinutes","formattedSeconds","timeString","formattedTime","onClick","ScoreForm","method","action","type","name","placeholder","score","GameLogic","GameContext","gameOver","setGameOver","gameWon","setGameWon","pressed","setTiles","biggestTile","setBiggestTile","dimension","numEmptyTiles","setNumEmptyTiles","direction","newTiles","updateTiles","move","checkGameOver","shift","generateNewNum","pass","shiftUp","shiftDown","shiftLeft","shiftRight","console","log","col","nextRow","nextCol","canMerge","merge","newVal","getRandomIndex","Math","floor","random","numToGenerate","ThemeStateContext","React","createContext","ThemeDispatchContext","themeReducer","state","document","documentElement","setAttribute","color","fun","ThemeProvider","children","useReducer","dispatch","Provider","useThemeState","themeContext","undefined","Error","useThemeDispatch","Boolean","window","location","hostname","match","useKeyPress","keyPressed","setKeyPressed","downHandler","key","addEventListener","removeEventListener","ReactDOM","render","gameTime","endTime","topScores","token","restart","theme","id","scoreValue","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.6613e682.chunk.js","sourcesContent":["export const dimension = 4;\n\nexport const DIRECTION = {\n  UP: 'up',\n  DOWN: 'down',\n  LEFT: 'left',\n  RIGHT: 'right'\n};\n\nexport const winningTile = 16;\n\nexport const initialTime = '00:00:00';\n\nexport const initialTiles = [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t];\n\nexport const THEMES = {\n\tlight: 'light',\n  dark: 'dark',\n  ultra: 'ultra',\n\tnormal: 'normal',\n}\n","import React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { BoardContext } from '../index.js'\nimport '../style/style.css'\nimport '../style/tiles.css'\n\nconst Tile = props => {\n\tTile.propTypes = {\n\t\tvalue: PropTypes.number,\n\t}\n\n\tvar tileNum = props.value;\n\tvar tileType = '';\n\tif (tileNum === 0) {\n\t\ttileType = 'blankTile';\n\t} else {\n\t\ttileType = `nonBlankTile tile${tileNum}`;\n\t}\n\tvar tileClasses = `tile ${tileType}`;\n  return (\n    <button className={tileClasses}>\n      {tileNum}\n    </button>\n  );\n};\n\nexport const Board = () => {\n\tconst tiles = useContext(BoardContext).tiles; \n\tlet rows = [0, 1, 2, 3];\n\n  const renderTile = (i, j) => {\n    return <Tile value={tiles[i][j]} />;\n  };\n\n\tconst renderRow = i => {\n\t\treturn (\n\t\t\t<div className='board-row'>\n\t\t\t\t{rows.map(row => renderTile(i, row))}\n\t\t\t</div>\n\t\t);\n\t};\n\n  return (\n    <div className='board'>\n\t\t\t{rows.map(row => renderRow(row))}\n    </div>\n  );\n};\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { TimeContext } from '../index.js'\n\nconst Stopwatch = () => {\n\tconst { setGameTime } = useContext(TimeContext);\n\n  var [paused, setPaused] = useState(false);\n  var [time, setTime] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n\n  // let one second pass\n  const tick = () => {\n    if (paused) {\n      return;\n    }\n    var newHours = time.hours;\n    var newMinutes = time.minutes;\n    var newSeconds = time.seconds + 1;\n\n    if (newSeconds === 60) {\n      setTime({\n        hours: time.hours,\n        minutes: time.minutes + 1,\n        seconds: 0\n      });\n      newSeconds = 0;\n      newMinutes += 1;\n    }\n    if (newMinutes === 60) {\n      newMinutes = 0;\n      newHours += 1;\n    }\n    setTime({\n      hours: newHours,\n      minutes: newMinutes,\n      seconds: newSeconds\n    });\n  };\n\n  const padTime = timeComponent => {\n    return timeComponent.toString().padStart(2, \"0\");\n  };\n\n  const formattedTime = () => {\n    var formattedHours = padTime(time.hours);\n    var formattedMinutes = padTime(time.minutes);\n    var formattedSeconds = padTime(time.seconds);\n    var timeString = \n\t\t\t`${formattedHours}: ${formattedMinutes}: ${formattedSeconds}`;\n\t\tsetGameTime(timeString);\n    return timeString;\n  };\n\n  useEffect(() => {\n    let timerId = setInterval(tick, 1000); // tick every sec \n    return () => {\n      clearInterval(timerId);\n    };\n  }, [time]);\n\n  return (\n    <div className='stopwatch'>\n      <p>{formattedTime()}</p>\n\t\t\t<button className='pauseButton' onClick={() => setPaused(!paused)}>\n\t\t\t\t{paused ? \"Resume\" : \"Pause\"}\n\t\t\t</button>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst ScoreForm = props => {\n\tScoreForm.propTypes = {\n\t\tscore: PropTypes.number, \n\t}\n\treturn (\n\t\t<form className='scoreForm' method='POST' action='/'>\n\t\t\t<input type=\"text\" name=\"name\" placeholder=\"Enter name\"/>\n\t\t\t<input type=\"text\" name=\"scoreValue\" value={props.score}/>\n\t\t\t<input type=\"submit\" value=\"Submit\"/>\n\t\t</form>\n\t);\n};\n\nconst startButton = () => {\n  return <button className=\"startButton\"></button>;\n};\n\n// TO DO: replace board when game over\nconst GameEndDisplay = () => {\n  return <p> whooo </p>;\n};\n\nexport { ScoreForm, startButton, GameEndDisplay };\n","import { useContext, useEffect, useState } from \"react\";\nimport { dimension, DIRECTION, winningTile } from \"./constants.js\";\nimport { GameContext, BoardContext } from './index.js'\n\nexport const GameLogic = () =>  {\n\tconst { \n\t\tgameOver, \n\t\tsetGameOver, \n\t\tgameWon, \n\t\tsetGameWon, \n\t\tpressed \n\t} = useContext(GameContext);\n\tconst { tiles, setTiles } = useContext(BoardContext);\n\tconst [ biggestTile, setBiggestTile ] = useState(0);\n\tconst [ numEmptyTiles, setNumEmptyTiles ] = useState(dimension * dimension);\n\t\n\t/**\n\t * Handle board updates in one move\n\t */\n  const move = () => {\n    var direction = pressed.direction;\n    if (direction != null) {\n      var newTiles = updateTiles(tiles, direction);\n      setTiles(newTiles);\n    }\n  };\n\n  useEffect(() => {\n\t\tif (!gameOver) {\n\t\t\tmove();\n\t\t}\n  }, [pressed]);\n\n\tuseEffect(() => {\n\t\tcheckGameOver();\t\n\t}, [biggestTile, numEmptyTiles]);\n\n\tconst checkGameOver = () =>  {\n\t\tif (numEmptyTiles === 0) {\n\t\t\tsetGameOver(true);\n\t\t\tsetGameWon(false);\n\t\t}\n\t\tif (biggestTile === winningTile) {\n\t\t\tsetGameOver(true);\n\t\t\tsetGameWon(true);\n\t\t}\n\t}\n\n\t/**\n\t * Update board tiles in specified direction\n\t * @param {DIRECTION} direction to shift board\n\t */\n\tconst updateTiles = (tiles, direction) => {\n\t\tvar newTiles = [...tiles];\n\t\tshift(newTiles, direction);\n\t\tgenerateNewNum(newTiles);\n\t\treturn newTiles;\n\t};\n\n\t/**\n\t * Full shift in direction specified\n\t */\n\tconst shift = (newTiles, direction) => {\n\t\tfor (let pass = 0; pass < dimension; pass++) {\n\t\t\tswitch (direction) {\n\t\t\t\tcase DIRECTION.UP:\n\t\t\t\t\tshiftUp(newTiles);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIRECTION.DOWN:\n\t\t\t\t\tshiftDown(newTiles);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIRECTION.LEFT:\n\t\t\t\t\tshiftLeft(newTiles);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIRECTION.RIGHT:\n\t\t\t\t\tshiftRight(newTiles);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.log(\"not a direction\");\n\t\t\t}\n\t\t}\n\t};\n\n\t/*\n\t * Each tile shifts up one space if possible\n\t */\n\tconst shiftUp = newTiles => {\n\t\tfor (let row = 0; row < dimension - 1; row++) {\n\t\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\t\tlet nextRow = row + 1;\n\t\t\t\tlet nextCol = col;\n\t\t\t\tif (canMerge(newTiles, row, col, nextRow, nextCol)) {\n\t\t\t\t\tmerge(newTiles, row, col, nextRow, nextCol);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/*\n\t * Each tile shifts left one if possible\n\t */\n\tconst shiftLeft = newTiles => {\n\t\tfor (let row = 0; row < dimension; row++) {\n\t\t\tfor (let col = 0; col < dimension - 1; col++) {\n\t\t\t\tlet nextRow = row;\n\t\t\t\tlet nextCol = col + 1;\n\t\t\t\tif (canMerge(newTiles, row, col, nextRow, nextCol)) {\n\t\t\t\t\tmerge(newTiles, row, col, nextRow, nextCol);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/*\n\t * Each tile shifts down one if possible\n\t */\n\tconst shiftDown = newTiles => {\n\t\tfor (let row = dimension - 1; row > 0; row--) {\n\t\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\t\tlet nextRow = row - 1;\n\t\t\t\tlet nextCol = col;\n\t\t\t\tif (canMerge(newTiles, row, col, nextRow, nextCol)) {\n\t\t\t\t\tmerge(newTiles, row, col, nextRow, nextCol);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\t/*\n\t * Each tile shifts right one if possible\n\t */\n\tconst shiftRight = newTiles => {\n\t\tfor (let row = 0; row < dimension; row++) {\n\t\t\tfor (let col = dimension - 1; col > 0; col--) {\n\t\t\t\tlet nextRow = row;\n\t\t\t\tlet nextCol = col - 1;\n\t\t\t\tif (canMerge(newTiles, row, col, nextRow, nextCol)) {\n\t\t\t\t\tmerge(newTiles, row, col, nextRow, nextCol);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\n\t/**\n\t * Sum value from nextRow, nextCol, into row, col \n\t * Side effect: if new value formed is winning Tile, set game over\n\t */\n\tconst merge = (newTiles, row, col, nextRow, nextCol) => {\n\t\tif (newTiles[row][col] !== 0) { //not merging into empty\n\t\t\tsetNumEmptyTiles(numEmptyTiles => numEmptyTiles + 1);\n\t\t}\n\t\tlet newVal = newTiles[row][col] + newTiles[nextRow][nextCol];\n\t\tnewTiles[row][col] = newVal;\n\t\tnewTiles[nextRow][nextCol] = 0;\n\t\tif (newVal > biggestTile) {\n\t\t\tsetBiggestTile(newVal);\n\t\t}\n\t\treturn newVal;\n\t};\n\n\t/**\n\t * We can merge if tiles match or if merging into a blank\n\t */\n\tconst canMerge = (newTiles, row, col, nextRow, nextCol) => {\n\t\treturn (newTiles[row][col] === newTiles[nextRow][nextCol] ||\n\t\t\t\t\t\tnewTiles[row][col] === 0);\n\t}\n\n\t/** \n\t * return random row or col index\n\t */\n\tconst getRandomIndex = () => {\n\t\treturn Math.floor(Math.random() * dimension);\n\t};\n\n\t/**\n\t * Generates new 2 or 4 in random spot and updates board\n\t */\n\tconst generateNewNum = newTiles => {\n\t\tlet row = getRandomIndex();\n\t\tlet col = getRandomIndex();\n\t\tif (newTiles[row][col] === 0) {\n\t\t\tnewTiles[row][col] = numToGenerate();\n\t\t\tsetNumEmptyTiles(numEmptyTiles => numEmptyTiles - 1);\n\t\t} else { \n\t\t\t\tif (numEmptyTiles !== 0) {\n\t\t\t\tgenerateNewNum(newTiles);\n\t\t\t} \n\t\t}\n\t};\n\n\t/**\n\t * when we reach a high enough point, generate 4\n\t */\n\tconst numToGenerate = () => {\n\t\tif (biggestTile >= 32) {\n\t\t\tif (Math.random() > .5) {\n\t\t\t\treturn 4;\n\t\t\t}\n\t\t}\n\t\treturn 2;\n\t}\n\treturn gameWon; \n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {THEMES} from './constants.js';\n\nconst ThemeStateContext = React.createContext();\nconst ThemeDispatchContext = React.createContext();\n\nconst themeReducer = (state, action) => {\n\tswitch (action) {\n\t\tcase THEMES.light:\n\t\t\tdocument.documentElement.setAttribute(\"data-theme\", 'dark');\n\t\t\treturn {color: THEMES.dark, fun: state.fun};\n\t\tcase THEMES.dark:\n\t\t\tdocument.documentElement.setAttribute(\"data-theme\", 'light');\n\t\t\treturn {color: THEMES.light, fun: state.fun};\n\t\tcase THEMES.ultra:\n\t\t\tdocument.documentElement.setAttribute(\"fun-theme\", 'normal');\n\t\t\treturn {color: state.color, fun: THEMES.normal};\n\t\tcase THEMES.normal:\n\t\t\tdocument.documentElement.setAttribute(\"fun-theme\", 'ultra');\n\t\t\treturn {color: state.color, fun: THEMES.ultra};\n\t\tdefault: \n\t\t\tdocument.documentElement.setAttribute(\"data-theme\", 'light');\n\t\t\tdocument.documentElement.setAttribute(\"fun-theme\", 'normal');\n\t\t\treturn {color: THEMES.light, fun: THEMES.normal};\n\t}\n}\n\nconst ThemeProvider = ({children}) => {\n\tThemeProvider.propTypes = {\n\t\tchildren: PropTypes.isRequired\n\t}\n\n\tconst [state, dispatch] = \n\t\tReact.useReducer(themeReducer, {color: THEMES.light, fun: THEMES.normal});\n\treturn (\n\t\t<ThemeStateContext.Provider value={state}>\n\t\t\t<ThemeDispatchContext.Provider value={dispatch}>\n\t\t\t\t{children}\n\t\t\t</ThemeDispatchContext.Provider>\n\t\t</ThemeStateContext.Provider>\n\t);\n}\n\nconst useThemeState = () => {\n\tconst themeContext = React.useContext(ThemeStateContext);\n\tif (themeContext === undefined) {\n\t\tthrow new Error('themeContext must be used within a ThemeProvider');\n\t}\n\treturn themeContext;\n}\n\nconst useThemeDispatch = () => {\n\tconst themeContext = React.useContext(ThemeDispatchContext);\n\tif (themeContext === undefined) {\n\t\tthrow new Error('themeContext must be used within a ThemeProvider');\n\t}\n\treturn themeContext;\n}\n\nexport { ThemeProvider, useThemeState, useThemeDispatch }\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { \n\tDIRECTION,\n\tTHEMES,\n\tinitialTime, \n\tinitialTiles, \n} from './constants.js';\nimport { Board } from './components/board.js';\nimport Stopwatch from './components/stopwatch.js';\nimport { ScoreForm } from './components/displayComponents.js';\nimport { GameLogic } from './gameLogic.js';\nimport { ThemeProvider, useThemeState, useThemeDispatch } from './themes.js';\nimport * as serviceWorker from './serviceWorker'; \nimport './style/style.css';\n\nexport const GameContext = React.createContext();\nexport const TimeContext = React.createContext();\nexport const BoardContext = React.createContext();\n\nconst Game = () => {\n\t// GameContext\n  const [gameOver, setGameOver] = useState(false); \n\tconst [gameWon, setGameWon] = useState(false);\n\tconst pressed = useKeyPress(); \n\n\t// TimeContext\n\tconst [gameTime, setGameTime] = useState(initialTime); \n\n\t//BoardContext\n\tconst [tiles, setTiles] = useState(initialTiles);\n\n  var endTime = null;\n\tvar topScores = window.token; \n\n\tconst restart = () => {\n\t\tsetGameOver(false);\n\t\tsetGameWon(false);\n\t\tconsole.log(gameWon);\n\t\tsetTiles(initialTiles);\n\t\tconsole.log(tiles);\n\t\tconsole.log(\"restart\");\n\t}\n\n\tconst StartButton = () => {\n\t\treturn (\n\t\t\t<button onClick={restart}>\n\t\t\tRestart\n\t\t\t</button>\n\t\t);\n\t}\n\n\tconst displayScores = () => {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{topScores.map(score => \n\t\t\t\t\t<div key={score.id}>\n\t\t\t\t\t\t<p>{score.name}: {score.scoreValue} </p> \n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst renderStatus = () => {\n\t\tif (gameOver && gameWon) {\n\t\t\tendTime = gameTime;\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>You won!</p>\n\t\t\t\t\t<p>Your time is {endTime} </p>\n\t\t\t\t\t<ScoreForm className='scoreForm' score={endTime}/>\n\t\t\t\t</>\n\t\t\t);\n\t\t} else if (gameOver && !gameWon) {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<p>You lost!</p>\n\t\t\t\t\t<p>Try again? </p>\n\t\t\t\t</>\n\t\t\t);\n\t\t} else {\n\t\t\treturn (\n\t\t\t\t<>\n\t\t\t\t\t<TimeContext.Provider value={{ setGameTime }}>\n\t\t\t\t\t\t<Stopwatch/>\n\t\t\t\t\t</TimeContext.Provider>\n\t\t\t\t</>\n\t\t\t);\n\t\t}\n\t};\n\n\tconst ToggleLightDark = () => {\n\t\tlet theme = useThemeState().color;\n\t\tlet dispatch = useThemeDispatch();\n\t\treturn (\n\t\t\t<button onClick={() => dispatch(theme)}>\n\t\t\t\t{ theme === THEMES.light ? 'dark mode' : 'light mode' }\t\n\t\t\t</button>\n\t\t);\n\t}\n\n\tconst ToggleNormalUltra = () => {\n\t\tlet theme = useThemeState().fun;\n\t\tlet dispatch = useThemeDispatch();\n\t\treturn (\n\t\t\t<button onClick={() => dispatch(theme)}>\n\t\t\t\t{ theme === THEMES.normal ? 'ultra mode' : 'normal mode' }\t\n\t\t\t</button>\n\t\t);\n\t}\n\n\t// Game \n  return (\n\t\t\t<div className='container'>\n\t\t\t\t<div className='leftContainer'> \n\t\t\t\t\t<div className='header'>\n\t\t\t\t\t\t<h1>2048</h1>\n\t\t\t\t\t\t<div> \n\t\t\t\t\t\t\t<p className='subheader'>Merge the tiles to get to</p>\n\t\t\t\t\t\t\t<b><p className='subheader, highlight'>2048</p></b>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='stopwatch'>\n\t\t\t\t\t\t{renderStatus()}\n\t\t\t\t\t\t<ThemeProvider>\n\t\t\t\t\t\t\t<ToggleLightDark />\n\t\t\t\t\t\t\t<ToggleNormalUltra/>\n\t\t\t\t\t\t</ThemeProvider>\n\t\t\t\t\t\t<StartButton/>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='gameContainer'>\n\t\t\t\t\t\t<GameContext.Provider value={{ gameOver, setGameOver, gameWon, \n\t\t\t\t\t\t\t\tsetGameWon, pressed}}>\n\t\t\t\t\t\t\t<BoardContext.Provider value = {{ tiles, setTiles }}>\n\t\t\t\t\t\t\t\t<GameLogic />\n\t\t\t\t\t\t\t\t<Board />\n\t\t\t\t\t\t\t</BoardContext.Provider>\n\t\t\t\t\t\t</GameContext.Provider>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div className='footer'>\n\t\t\t\t\t\t<h3>Directions</h3>\n\t\t\t\t\t\t<p>h: left, k: up, j: down, l: right </p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div className='rightContainer'>\n\t\t\t\t\t<div id='scoresHeader'><h2>High Scores</h2></div>\n\t\t\t\t\t{displayScores()}\n\t\t\t\t</div>\n\t\t\t</div>\n  );\n};\n\n// key press handler using vim keys\nconst useKeyPress = () => {\n  const [keyPressed, setKeyPressed] = useState({ direction: null });\n\n  const downHandler = ({ key }) => {\n    let pressed = null;\n    switch (key) {\n      case 'k':\n        pressed = DIRECTION.UP;\n        break;\n      case 'j':\n        pressed = DIRECTION.DOWN;\n        break;\n      case 'h':\n        pressed = DIRECTION.LEFT;\n        break;\n      case 'l':\n        pressed = DIRECTION.RIGHT;\n        break;\n      default:\n        pressed = null;\n        break;\n    }\n    setKeyPressed({ direction: pressed });\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, []);\n  return keyPressed;\n};\n\n// ========================================\nReactDOM.render(<Game />, document.getElementById('root'));\nserviceWorker.unregister()\n"],"sourceRoot":""}