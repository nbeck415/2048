{"version":3,"sources":["constants.js","components/board.js","components/stopwatch.js","components/scoreForm.js","gameLogic.js","serviceWorker.js","index.js"],"names":["DIRECTION","initialTiles","Tile","props","className","value","Board","tiles","useContext","BoardContext","renderTile","i","j","renderRow","Stopwatch","setGameTime","TimeContext","useState","paused","setPaused","hours","minutes","seconds","time","setTime","tick","newHours","newMinutes","newSeconds","padTime","timeComponent","toString","padStart","useEffect","timerId","setInterval","clearInterval","formattedHours","formattedMinutes","formattedSeconds","timeString","formattedTime","onClick","ScoreForm","method","action","type","name","placeholder","score","GameLogic","GameContext","gameOver","setGameOver","pressed","setTiles","direction","newTiles","move","updateBoard","updateTiles","generateNewNum","slide","shift","merge","row1","col1","row2","col2","currentVal","adjacentVal","newVal","console","log","slideUp","col","row","dimension","slideLeft","slideDown","slideRight","nextRow","shiftUp","shiftDown","nextCol","shiftLeft","shiftRight","getRandomIndex","Math","floor","random","Boolean","window","location","hostname","match","React","createContext","useKeyPress","keyPressed","setKeyPressed","downHandler","key","addEventListener","removeEventListener","ReactDOM","render","gameTime","endTime","topScores","token","Provider","map","id","scoreValue","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"js/main.bedcb7ea.chunk.js","sourcesContent":["export const dimension = 4;\n\nexport const DIRECTION = {\n  UP: \"up\",\n  DOWN: \"down\",\n  LEFT: \"left\",\n  RIGHT: \"right\"\n};\n\nexport const winningTile = 16;\n\nexport const initialTime = '00:00:00';\n\nexport const initialTiles = [\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0],\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t[0, 0, 0, 0], \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t];\n","import React, { useContext } from \"react\";\nimport PropTypes from 'prop-types';\nimport { BoardContext } from '../index.js'\nimport '../style.css'\n\nconst Tile = props => {\n\tTile.propTypes = {\n\t\tvalue: PropTypes.number,\n\t}\n  return (\n    <button className=\"tile\">\n      {props.value}\n    </button>\n  );\n};\n\nexport const Board = () => {\n\tconst tiles = useContext(BoardContext).tiles; \n  const renderTile = (i, j) => {\n    return <Tile value={tiles[i][j]} />;\n  };\n\n\tconst renderRow = i => {\n\t\treturn (\n\t\t\t<div className=\"board-row\">\n\t\t\t\t{renderTile(i, 0)}\n\t\t\t\t{renderTile(i, 1)}\n\t\t\t\t{renderTile(i, 2)}\n\t\t\t\t{renderTile(i, 3)}\n\t\t\t</div>\n\t\t);\n\t};\n\n  return (\n    <div>\n\t\t\t{renderRow(0)}\n\t\t\t{renderRow(1)}\n\t\t\t{renderRow(2)}\n\t\t\t{renderRow(3)}\n    </div>\n  );\n};\n","import React, { useContext, useState, useEffect } from \"react\";\nimport { TimeContext } from '../index.js'\n\nconst Stopwatch = () => {\n\tconst { setGameTime } = useContext(TimeContext);\n\n  var [paused, setPaused] = useState(false);\n  var [time, setTime] = useState({\n    hours: 0,\n    minutes: 0,\n    seconds: 0\n  });\n\n  // let one second pass\n  const tick = () => {\n    if (paused) {\n      return;\n    }\n    var newHours = time.hours;\n    var newMinutes = time.minutes;\n    var newSeconds = time.seconds + 1;\n\n    if (newSeconds === 60) {\n      setTime({\n        hours: time.hours,\n        minutes: time.minutes + 1,\n        seconds: 0\n      });\n      newSeconds = 0;\n      newMinutes += 1;\n    }\n    if (newMinutes === 60) {\n      newMinutes = 0;\n      newHours += 1;\n    }\n    setTime({\n      hours: newHours,\n      minutes: newMinutes,\n      seconds: newSeconds\n    });\n  };\n\n  const padTime = timeComponent => {\n    return timeComponent.toString().padStart(2, \"0\");\n  };\n\n  const formattedTime = () => {\n    var formattedHours = padTime(time.hours);\n    var formattedMinutes = padTime(time.minutes);\n    var formattedSeconds = padTime(time.seconds);\n    var timeString = \n\t\t\t`${formattedHours}: ${formattedMinutes}: ${formattedSeconds}`;\n\t\tsetGameTime(timeString);\n    return timeString;\n  };\n\n  useEffect(() => {\n    let timerId = setInterval(tick, 1000); // tick every sec \n    return () => {\n      clearInterval(timerId);\n    };\n  }, [time]);\n\n  return (\n    <div>\n      <p>Time: {formattedTime()}</p>\n\t\t\t<button onClick={() => setPaused(!paused)}>\n\t\t\t\t{paused ? \"Resume\" : \"Pause\"}\n\t\t\t</button>\n    </div>\n  );\n};\n\nexport default Stopwatch;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst ScoreForm = props => {\n\tScoreForm.propTypes = {\n\t\tscore: PropTypes.number, \n\t}\n\n\treturn (\n\t\t<form method='POST' action='/'>\n\t\t\t<input type=\"text\" name=\"name\" placeholder=\"Enter name\"/>\n\t\t\t<input type=\"text\" name=\"scoreValue\" value={props.score}/>\n\t\t\t<input type=\"submit\" value=\"Submit\"/>\n\t\t</form>\n\t);\n};\n\nexport default ScoreForm;\n","import { useContext, useEffect } from \"react\";\nimport { dimension, DIRECTION, winningTile } from \"./constants.js\";\nimport { GameContext, BoardContext } from './index.js'\nimport './style.css'\n\n//is there a better way of doing this\nexport const GameLogic = () =>  {\n\tconst { gameOver, setGameOver, pressed } = useContext(GameContext);\n\tconst { tiles, setTiles } = useContext(BoardContext);\n\t\n  const updateBoard = () => {\n    var direction = pressed.direction;\n    // if valid key pressed\n    if (direction != null) {\n      var newTiles = move(tiles, direction);\n      setTiles(newTiles);\n    }\n  };\n  useEffect(() => {\n    updateBoard();\n  }, [pressed]);\n\n\t/**\n\t * Handle changes when one key is pressed\n\t */\n\tconst move = (tiles, direction) => {\n\t\tvar newTiles = [...tiles];\n\t\tupdateTiles(newTiles, direction);\n\t\tgenerateNewNum(newTiles);\n\t\treturn newTiles;\n\t};\n\t/**\n\t * Update board tiles in specified direction\n\t * @param {DIRECTION} direction to shift board\n\t */\n\tconst updateTiles = (newTiles, direction) => {\n\t\tslide(newTiles, direction);\n\t\tshift(newTiles, direction);\n\t\tslide(newTiles, direction);\n\t\treturn newTiles;\n\t};\n\n\t/**\n\t * Merge new from row2, col2, into row1, col1\n\t * Side effect: if new value formed is winning Tile, set game over\n\t */\n\tconst merge = (newTiles, row1, col1, row2, col2) => {\n\t\tlet currentVal = newTiles[row1][col1];\n\t\tlet adjacentVal = newTiles[row2][col2];\n\t\tlet newVal = currentVal + adjacentVal;\n\t\tnewTiles[row1][col1] = currentVal + adjacentVal;\n\t\tnewTiles[row2][col2] = 0;\n\t\tif (newVal === winningTile) {\n\t\t\tsetGameOver(true);\n\t\t\tconsole.log(gameOver);\n\t\t}\n\t};\n\n\t// do \"sliding all the way\" when shift\n\tconst slideUp = (newTiles, col) => {\n\t\t//slide incrementally\n\t\tfor (let row = 0; row < dimension - 1; row++) {\n\t\t\tif (newTiles[row][col] === 0) {\n\t\t\t\tlet row2 = row + 1;\n\t\t\t\t//slide next available non blank tile\n\t\t\t\twhile (row2 < dimension - 1 && newTiles[row2][col] === 0) {\n\t\t\t\t\trow2 += 1;\n\t\t\t\t}\n\t\t\t\tmerge(newTiles, row, col, row2, col);\n\t\t\t}\n\t\t}\n\t\treturn newTiles;\n\t};\n\n\tconst slideLeft = (newTiles, row) => {\n\t\tfor (let col = 0; col < dimension - 1; col++) {\n\t\t\tif (newTiles[row][col] === 0) {\n\t\t\t\tlet col2 = col + 1;\n\t\t\t\twhile (col2 < dimension - 1 && newTiles[row][col2] === 0) {\n\t\t\t\t\tcol2 += 1;\n\t\t\t\t}\n\t\t\t\tmerge(newTiles, row, col, row, col2);\n\t\t\t}\n\t\t}\n\t\treturn newTiles;\n\t};\n\n\tconst slideDown = (newTiles, col) => {\n\t\tfor (let row = dimension - 1; row > 0; row--) {\n\t\t\tif (newTiles[row][col] === 0) {\n\t\t\t\tlet row2 = row - 1;\n\t\t\t\twhile (row2 > 0 && newTiles[row2][col] === 0) {\n\t\t\t\t\trow2 -= 1;\n\t\t\t\t}\n\t\t\t\tmerge(newTiles, row, col, row2, col);\n\t\t\t}\n\t\t}\n\t\treturn newTiles;\n\t};\n\n\tconst slideRight = (newTiles, row) => {\n\t\tfor (let col = dimension - 1; col > 0; col--) {\n\t\t\tif (newTiles[row][col] === 0) {\n\t\t\t\tlet col2 = col - 1;\n\t\t\t\twhile (col2 > 0 && newTiles[row][col2] === 0) {\n\t\t\t\t\tcol2 -= 1;\n\t\t\t\t}\n\t\t\t\tmerge(newTiles, row, col, row, col2);\n\t\t\t}\n\t\t}\n\t\treturn newTiles;\n\t};\n\n\tconst slide = (newTiles, direction) => {\n\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\tswitch (direction) {\n\t\t\t\tcase DIRECTION.UP:\n\t\t\t\t\tslideUp(newTiles, col);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIRECTION.DOWN:\n\t\t\t\t\tslideDown(newTiles, col);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIRECTION.LEFT:\n\t\t\t\t\tslideLeft(newTiles, col);\n\t\t\t\t\tbreak;\n\t\t\t\tcase DIRECTION.RIGHT:\n\t\t\t\t\tslideRight(newTiles, col);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: // do nothing\n\t\t\t\t\tconsole.log(\"not a direction\");\n\t\t\t}\n\t\t}\n\t};\n\n\t// modify board with merged tiles newTiles up one\n\tconst shiftUp = newTiles => {\n\t\tfor (let row = 0; row < dimension - 1; row++) {\n\t\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\t\tlet nextRow = row + 1;\n\t\t\t\tif (newTiles[row][col] === newTiles[nextRow][col]) {\n\t\t\t\t\tmerge(newTiles, row, col, nextRow, col);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst shiftLeft = newTiles => {\n\t\tfor (let row = 0; row < dimension; row++) {\n\t\t\tfor (let col = 0; col < dimension - 1; col++) {\n\t\t\t\tlet nextCol = col + 1;\n\t\t\t\tif (newTiles[row][col] === newTiles[row][nextCol]) {\n\t\t\t\t\tmerge(newTiles, row, col, row, nextCol);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst shiftDown = newTiles => {\n\t\tfor (let row = dimension - 1; row > 0; row--) {\n\t\t\tfor (let col = 0; col < dimension; col++) {\n\t\t\t\tlet nextRow = row - 1;\n\t\t\t\tif (newTiles[row][col] === newTiles[nextRow][col]) {\n\t\t\t\t\tmerge(newTiles, row, col, nextRow, col);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst shiftRight = newTiles => {\n\t\tfor (let row = 0; row < dimension; row++) {\n\t\t\tfor (let col = dimension - 1; col > 0; col--) {\n\t\t\t\tlet nextCol = col - 1;\n\t\t\t\tif (newTiles[row][col] === newTiles[row][nextCol]) {\n\t\t\t\t\tmerge(newTiles, row, col, row, nextCol);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\tconst shift = (newTiles, direction) => {\n\t\tswitch (direction) {\n\t\t\tcase DIRECTION.UP:\n\t\t\t\tshiftUp(newTiles);\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.DOWN:\n\t\t\t\tshiftDown(newTiles);\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.LEFT:\n\t\t\t\tshiftLeft(newTiles);\n\t\t\t\tbreak;\n\t\t\tcase DIRECTION.RIGHT:\n\t\t\t\tshiftRight(newTiles);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.log(\"not a direction\");\n\t\t\t//do nothing\n\t\t}\n\t};\n\n\t/** \n\t * return random row or col index\n\t */\n\tconst getRandomIndex = () => {\n\t\treturn Math.floor(Math.random() * dimension);\n\t};\n\n\t/**\n\t * Generates new 2 in random spot and updates board\n\t */\n\tconst generateNewNum = newTiles => {\n\t\tlet row = getRandomIndex();\n\t\tlet col = getRandomIndex();\n\t\tif (newTiles[row][col] === 0) {\n\t\t\tnewTiles[row][col] = 2;\n\t\t} else {\n\t\t\tgenerateNewNum(newTiles);\n\t\t}\n\t};\n\n\treturn  gameOver; \n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport ReactDOM from 'react-dom';\nimport { DIRECTION, initialTime, initialTiles } from './constants.js';\nimport { Board } from './components/board.js';\nimport Stopwatch from \"./components/stopwatch.js\";\nimport ScoreForm from \"./components/scoreForm.js\";\nimport { GameLogic } from \"./gameLogic.js\";\nimport * as serviceWorker from './serviceWorker'; \nimport './style.css';\n\nexport const GameContext = React.createContext();\nexport const TimeContext = React.createContext();\nexport const BoardContext = React.createContext();\n\nconst Game = () => {\n  const [gameOver, setGameOver] = useState(false); //GameContext\n\tconst pressed = useKeyPress(); //GameContext\n\tconst [gameTime, setGameTime] = useState(initialTime); //TimeContext\n\tconst [tiles, setTiles] = useState(initialTiles); //BoardContext\n\n  var endTime = null;\n\n\t// High scores\n\t// retrieve list of json name, score objects\n\tvar topScores = window.token; \n\tconst displayScores = () => {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{topScores.map(score => \n\t\t\t\t\t<div key={score.id}>\n\t\t\t\t\t\t<p>{score.name}: {score.scoreValue} </p> \n\t\t\t\t\t</div>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tconst gameDisplay = () => {\n\t\treturn (\n\t\t\t<GameContext.Provider value={{ gameOver, setGameOver, pressed}}>\n\t\t\t\t<BoardContext.Provider value = {{ tiles, setTiles }}>\n\t\t\t\t\t<GameLogic />\n\t\t\t\t\t<Board />\n\t\t\t\t</BoardContext.Provider>\n\t\t\t</GameContext.Provider>\n\t\t)\n\t}\n\n\tconst renderStatus = () => {\n\t\tif (gameOver) {\n\t\t\tendTime = gameTime;\n\t\t\treturn (\n\t\t\t\t<div>\n\t\t\t\t\t<p> You won! Your time is {endTime} </p>\n\t\t\t\t\t<ScoreForm score={endTime}/>\n\t\t\t\t\t<p>Whoo!</p>\n\t\t\t\t</div>\n\t\t\t);\n\t\t}\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<TimeContext.Provider value={{ setGameTime }}>\n\t\t\t\t\t<Stopwatch/>\n\t\t\t\t</TimeContext.Provider>\n\t\t\t</>\n\t\t);\n\t};\n\n\t// Game \n  return (\n\t\t\t<>\n\t\t\t\t{ renderStatus() }\n\t\t\t\t<div className='game'>\n\t\t\t\t\t{ gameDisplay() }\n\t\t\t\t\t<h2>High Scores</h2>\n\t\t\t\t\t{ displayScores()}\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<h3>Directions</h3>\n\t\t\t\t\t<p>h: left, k: up, j: down, l: right </p>\n\t\t\t\t</div>\n\t\t\t</>\n  );\n};\n\n// key press handler using vim keys\nconst useKeyPress = () => {\n  const [keyPressed, setKeyPressed] = useState({ direction: null });\n\n  const downHandler = ({ key }) => {\n    let pressed = null;\n    switch (key) {\n      case 'k':\n        pressed = DIRECTION.UP;\n        break;\n      case 'j':\n        pressed = DIRECTION.DOWN;\n        break;\n      case 'h':\n        pressed = DIRECTION.LEFT;\n        break;\n      case 'l':\n        pressed = DIRECTION.RIGHT;\n        break;\n      default:\n        pressed = null;\n        break;\n    }\n    setKeyPressed({ direction: pressed });\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n    };\n  }, []);\n  return keyPressed;\n};\n\n// ========================================\nReactDOM.render(<Game />, document.getElementById('root'));\nserviceWorker.unregister()\n"],"sourceRoot":""}